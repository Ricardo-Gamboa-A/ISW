 

 

 

d e s a r r o l l o   d e   a p l i c a c i o n e s   d e  

s o f t w a r e  

de p a rt am e nt o   de  i n fo rm ati c a,  un i ve r si d ad  te cn i ca   fe d e ri co   sa nt a  m a ri a  

he r n an   ast udi llo   r.  

i. 

software 

el  termino  software  es  un  anglicismo,  inventado  en  contraposicion  al  hardware  o 
ferreteria.    la  industria  de  tic1  mueve  alrededor  miles  de  millones  de  dolares  al  ano  en  el 
mundo,  y  el  software  esta  presente  en  sistemas  de  todo  tipo:  de  transporte,  medicos,  de 
telecomunicaciones, industriales, educacionales, militares, de entretencion, oficinas, etc. 

en  una  definicion  clasica,  pressman  (1993)  define  software  como  "...  (1)  las  instrucciones 
(programas  de  computadora)  que  cuando  son  ejecutadas  proveen  funciones  y  el  desempeno 
deseado,  (2)  las  estructuras  de  datos  que  permiten  a  instrucciones  manejar  adecuadamente  la 
informacion, y (3) los documentos que describen  la operacion y uso de las instrucciones." 

esta  definicion  proporciona  algunas  pistas  sobre  las  caracteristicas  especiales  de  la 
produccion de software. este producto es en esencia informacion procesando informacion y 
entregando  como  resultado  informacion.  esto  lo  hace  relativamente  facil  de  replicar  y 
habitualmente  muy  complejo  de  idear  o  desarrollar;  en  contraste  a  la  parte  fisica  de  los 
sistemas de la informacion (o hardware), donde su complejidad esta en la manufactura de los 
mismos  (carnahan  et  al.,  1997).  en  consecuencia,  dentro  de  la  industria  se  dice  que  un 
software no puede ser fabricado o manufacturado,  mas bien es desarrollado. 

la mayoria de las personas tiene experiencia diaria con software a traves de dos canales: su 
telefono  o  movil  (si  es  android,  iphone  o  equivalente),  y  el  computador  personal  de 
escritorio  en  su  oficina  u  hogar.    si  bien  tendencias  recientes  del  mercado  han  tendido  a 
converger ambas categorias (como tablets y laptops), ambas experiencias aun difieren; en 
particular, el comportamiento del software movil en general no es modificable sino a traves 
del cambio de parametros o adicion de apps, en tanto que el comportamiento del software 
de  escritorio  puede  modificarse  en  formas  amplias  y  casi  arbitrarias  (p.ej.  con  macros  de 
planillas de calculo o de editores). 

                                                            

1 tic: tecnologias de informacion y comunicacion 
casa central av. espana 1680, valparaiso, chile, fono: 56-32-265 42 42, fax: 56-32-279 75 13 

www.inf.utfsm.cl 

    campus san joaquin av. vicuna mackenna 3939, san joaquin, santiago, chile, fono: 56-2-432 66 09, fax: 56-2432 67 02 

            campus vitacura av. santa maria 6400, vitacura, santiago, chile, fono: 56-2-353 14 88, fax: 56-2-353 14 73 
 

 

sin embargo, desde el punto de vista de la industria, estos dos tipos de software son atipicos: 
son  productos  cerrados,  vendidos  como  unidad,  y  tienen  versiones  actualizadas  cada  cierto 
tiempo, cuya liberacion es parte de un ciclo de vida prolongado y guiado por el mercado. 

a  diferencia  de  estos  tipos  de  software,  los  sistemas  informaticos  de  negocios  tipicamente 
tienen  un  stack  (termino  ingles  para  apilar)  con  cuatro  capas,  cada  una  de  las  cuales 
utiliza a las precedentes: 

1)  hardware:  maquinas  y  dispositivos;  son  tipicamente  adquiridos  in  toto  de  grandes 

proveedores, p.ej. servidores (grandes maquinas) hp, ibm o hitachi. 

2)  software basico: disponibiliza las capacidades del hardware independientemente del 
proveedor  de  hardware,  y  es  desarrollado  por  proveedores  de  gran  escala;  p.ej.  los 
sistemas  operativos  como  windows  (de  microsoft).  linux  (de  comunidad  open 
source), android (de google, basado en linux), y osx y ios (ambos de apple). 

3)  middleware:  ofrece  capacidades  especializadas,  independientemente  del  software 
basico; p.ej. los gestores de bases de datos2 como db2 (de ibm), oracle database (de 
oracle),  o  mongodb  (de  comunidad  open  source);  y  servidores  de  aplicaciones, 
como oracle weblogic (de oracle), websphere (de ibm), y jboss (de redhat). 

4)  aplicaciones:  software  que  ayuda  a  usuarios  concretos  a  realizar  su  trabajo;  si 
apoyaran  tareas  genericas  pueden  ser  adquiridas  (p.ej.  word  y  excel,  de  microsoft, 
para edicion de documentos y planillas simples), pero si apoyaran tareas unicas o muy 
complejas deben ser desarrolladas ad-hoc. 

los  productos  disponibles  en  estas  capas  difieren  en  grado  de  detalle  tecnico,  en  perfil 
profesional de los especialistas correspondientes, tipicamente son adquiridas de proveedores 
que  se  mueven  en  mercados  (rubros)  diferentes;  y  especialmente  difieren  en  su  grado  de 
estandarizacion (alto en hardware, muy bajo en aplicaciones). 

las  economias  de  escala  han  llevado  a  la  adopcion  de  arquitecturas  de  referencia  o 
tecnologias  estandarizadas,  muchas  veces  definidas  por  consorcios  de  proveedores;  asi, 
muchos gestores de bases de datos y servidores de aplicaciones usan la arquitectura jee (java 
enterprise edition) y muchas aplicaciones son desarrolladas con esta arquitectura en mente 
(con  el  lenguaje  de  programacion  java  u  otro  basado  en  su  jvm);  y  similarmente  para  la 
arquitectura  de  referencia  .net  (controlada  por  microsoft).    ademas,  los  elementos  de 
software mas utilizados tipicamente son empacados y vendidos como paquete o framework. 

ii.  desarrollo de software 

el  aspecto  mas  riesgos  de  la  construccion  de  un  sistema  informatico  es,  siempre,  la 
construccion de elementos ad-hoc, aquello que no puedan ser comprados sino que deban ser 

                                                            

2 los gestores de bases de datos (dbms, por sus siglas en ingles) son casualmente llamados bases de 
datos,  aunque  estrictamente  hablando  una  base  de  datos  es  el  conjunto  de  datos  almacenados  y 
gestionados por un dbms. 
casa central av. espana 1680, valparaiso, chile, fono: 56-32-265 42 42, fax: 56-32-279 75 13 

www.inf.utfsm.cl 

    campus san joaquin av. vicuna mackenna 3939, san joaquin, santiago, chile, fono: 56-2-432 66 09, fax: 56-2432 67 02 

            campus vitacura av. santa maria 6400, vitacura, santiago, chile, fono: 56-2-353 14 88, fax: 56-2-353 14 73 
 

 

hechos ad-hos para ese sistema especifico.  este aspecto es clave si se desea obtener exito y 
rentabilidad repetidamente, y por ello la ingenieria de software como disciplina se ocupa de 
la  construccion  sistematica,  eficaz  y  eficiente  de  sistemas  de  software;  es  decir,  de  como  usar 
recursos limitados para construir software que sea util a sus clientes y usuarios, y como hacer 
esto una y otra vez.  el objeto de estudio es por ende triple: el software (artefactos) y como 
caracterizarlo  y  mejorarlo;  la  forma  de  construirlo  (proceso  de  desarrollo)  y  como 
caracterizarla y mejorarla; y los grupos estables (organizaciones) que lo construyen eficiente 
y eficazmente repetidamente, y como caracterizarlos y mejorarlos. 

para ilustrar la complejidad y escala del desarrollo de aplicaciones software, utilizaremos una 
analogia ojala mas cercana a la vida diaria: 

  muchas personas saben cocinar platos basicos (p.ej. arroz). 
  preparar bien un plato elaborado (p.ej. un fricase) es algo que requiere conocimiento, 

experiencia y cierta logistica. 

  preparar  una  cena  requiere  obtener  multiples  ingredientes  y  preparar  varios  platos 
simultaneamente,  coordinando  sus tiempos de termino  para ajustarse a la secuencia 
de  presentacion  en  la  mesa;  los  platos  tipicamente  pueden  ser  estipulados 
informalmente, o incluso consuetudinariamente. 

  preparar un banquete es mucho mas complejo: no solo se debe provisionar y prepar 
muchas cenas simultaneas, sino que se gestionar un equipo de garzones y espacios ad-
hoc;  pero  ademas,  un  banquete  debe  ser  concordado  especificamente  en  platos, 
restricciones  dieteticas,  etc.    ademas  de  requerir  un  equipo  multi-disciplinario,  el 
factor costo se  torna esencial, ya que  una cena se puede tratar como  un gasto  (si es 
elaborada en casa), pero los banquetes son preparados por organizaciones que deben 
hacerlos eficientemente una y otra vez.  

las  diferencias  fundamentales  entre  ejecutar un plato  y  ejecutar un  banquete son  de  escala 
(numero  de  elementos  en  juego),  coordinacion  de  roles  (solo  v/s  un  equipo  mult-
disciplinario), y criterios de exito (un plato sabroso v/s un evento memorable). 

similarmente  en  el  mundo  del  software,  muchas  personas  saben  programar  (p.ej.  escribir 
formulas en planillas de calculo), o incluso escribir programas individuales (p.ej. paginas web 
simples), pero no es posible escribir individualmente un sistema de software, que consiste 
en muchos programas que interactuan y colaboran como si fueran una sola gran entidad.  p.ej. 
el sistema de remuneraciones de una empresa tipicamente tiene programas para registrar 
horas,  sueldos,  cargas,  adelantos,  pagos,  imprimir  cheques,  hacer  conciliaciones,  ordenar 
acciones  al  banco,  etc  etc.;  esta  complejidad  esta  oculta  a  quien  solo  recibe  un  cheque,  y  es 
solo intuida por quienes lo suan para reportar/modificar/imprimir/etc. 

la  descripcion  de  las  tareas  y  restricciones  que  un  sistema  debe  proveer  y  satisfacer 
(respectivamente) son sus requisitos (usual pero erroneamente llamado requerimientos); 
las  tareas  a  ejecutar  son 
las  restricciones  (tiempos 
minimos/maximos,  cantidades  de  usuarios,  restricciones  de  seguridad,  que  informacion 
respaldar,  etc.)  son  los  requisitos  extra-funcionales  (a  veces  mal  traducidos  con  el 

los  requisitos  funcionales  y 

casa central av. espana 1680, valparaiso, chile, fono: 56-32-265 42 42, fax: 56-32-279 75 13 

www.inf.utfsm.cl 

    campus san joaquin av. vicuna mackenna 3939, san joaquin, santiago, chile, fono: 56-2-432 66 09, fax: 56-2432 67 02 

            campus vitacura av. santa maria 6400, vitacura, santiago, chile, fono: 56-2-353 14 88, fax: 56-2-353 14 73 
 

 

anglicismo  requisitos  no-funcionales).    en  el  ejemplo  anterior,  cada  tarea  del  sistema  de 
remuneraciones  debe  ser  descrita  separadamente;  el  mecanismo  usual  para  describir  estas 
tareas son los casos de uso, inicialmente introducidos por jacobson en la decada del 60 (a la 
sazon en la telefonica ericsson, suecia) pero progresivamente adoptados por la comunidad de 
desarrollo  de  software,  y  que  son  hoy  en  dia  la  practica  estandar  (de  hecho  ensenados  a 
alumnos de informatica en tercer ano, sino antes). 

iii.  procesos de desarrollo de software 

la  ingenieria  de  software  es  la  disciplina  que  se  ocupa  del  desarrollo  sistematico,  eficaz  y 
eficiente  de  software,  y  se  ocupa  de  metodos,  tecnicas,  practicas  y  estandares  tanto  para  el 
desarrollo  individual  como  grupal  y  organizacional.    tal  como  otras  disciplinas  tienen  su 
concepto fundamental (asi, la celula en biologia), el concepto fundamental de la ingenieria de 
software  es  una  abstraccion:  el  proceso  de  desarrollo  de  software,  que  es  la  descripcion 
ordenada  y  razonada  de  la  forma  en  que  una  persona,  grupo  u  organizacion  aborda 
sistematicamente el desarrollo de software. 

en  los  procesos  de  desarrollo  tradicionales,  hay  tres  grandes  fases  que  estan  presentes  en 
todo  proceso  de  desarrollo  de  software,  estas  son:  la  definicion,  el  desarrollo  y  la 
mantencion. 

identificar 

1.  la  fase  de  definicion involucra directamente la deduccion de  requisitos  del  sistema, y 
permite 
funcionalidades  y  caracterizarlas  como  exigidas,  deseadas  o 
preferidas; que restricciones tendra el sistema; y que cualidades o propiedades tendra el 
sistema (p.ej. confiabilidad, seguridad, usabilidad, mantenibilidad).  los requisitos deben 
ser validados por el cliente. 

en esta fase siempre ocurren de alguna forma las siguientes tres actividades: 

1.  contacto  con  el  cliente:  una  actividad  de  investigacion  y  consulta,  para  definir 

que hara el sistema y que papel que jugara en el entorno donde funcionara. 

2.  planificacion  del  proyecto:  consiste  en  establecer  el  alcance  (funcionalidades, 
restricciones y propiedades) del sistema, identificar los riesgos, asignar recursos, 
estimar costos, y definir las tareas y la agenda a seguir.  

3.  analisis de requisitos: consiste en establecer una definicion mas detallada de la 

informacion, comportamiento y funciones necesarias en el sistema a construir. 

2.  la  fase  de  desarrollo  esta  enfocada  en  la  construccion  del  sistema:  su  arquitectura 
(componentes y sus relaciones), detalles de codigo,  algoritmos especificos (si los hay), e 
interfaces humano-computador. en esta fase ocurren las siguientes actividades: 

1.  diseno:  actividad  que  convierte  los  requisitos  en  representaciones  de  software 
(tambien llamada su diseno) que describen la estructura, arquitectura, algoritmos, e 
interfaces humano-computador. 

casa central av. espana 1680, valparaiso, chile, fono: 56-32-265 42 42, fax: 56-32-279 75 13 

www.inf.utfsm.cl 

    campus san joaquin av. vicuna mackenna 3939, san joaquin, santiago, chile, fono: 56-2-432 66 09, fax: 56-2432 67 02 

            campus vitacura av. santa maria 6400, vitacura, santiago, chile, fono: 56-2-353 14 88, fax: 56-2-353 14 73 
 

 

2.  codificacion: esta etapa se traducen las representaciones del diseno en un lenguaje 
de programacion convencional o no procedimental, que es posible de interpretar por 
la maquina. 

3.  prueba:  el  sistema  es  implementado  (instalado  en  su  ambiente  objetivo  o  en  un 
ambiente  de  prueba  similar  a  el)  y  ejecutado  para  identificar  errores  logicos,  de 
implementacion o de funcionalidad, que son reportados para su correccion. 

3.  la fase de mantencion incluye los cambios posteriores a la entrega del sistema, y que a 

grandes rasgos caen en cuatro categorias: 

1.  de  correccion:  algunas  funcionalidades  o  propiedades  del  sistema  pueden  estar 
incorrectamente  implementadas  (no  habiendo  sido  esto  detectado  en  la  etapa  de 
prueba). 

2.  de  adaptacion:  el  entorno  en  que  esta  instalado  el  sistemas  puede  cambiar  (p.ej. 
nuevos  computadores),  y  algunos  elementos  del  sistemas  pueden  requerir 
modificaciones. 

3.  de  mejora:  algunas  funciones  adicionales  pueden  ser  detectadas  despues  de 

comenzar a usar el software (p.ej. agregar una interfaz para moviles). 

4.  de  reingenieria:  en  ocasiones  es  necesario  reconstruir  un  software  en  forma 

mejorada (p.ej. para simplificar estructura y reducir costos de mantencion). 

las  tres  fases  genericas  del  desarrollo  de  software  son  complementadas  con  actividades 
protectoras, que se realizan en forma paralela a las fases del proyecto. algunas actividades 
protectoras son: 

1.  aseguramiento de la calidad: considera las actividades ejecutadas en cada actividad, 

controlando la documentacion producida para que este disponible mas tarde. 

2.  gestion  de  la  configuracion:  la  informacion  de  valor  creada  durante  las  fases  y 
actividades  del  proyecto  debe  ser  definida  y  controlada;  diferentes  paradigmas  de 
desarrollo  proponen  diferentes  tipos  de  informacion  a  guardar.  existe  tambien  un 
proceso formal de control de cambios para evaluar, aprobar y monitorear cambios a 
los requisitos durante el desarrollo del proyecto. 

3.  monitoreo  del proyecto: existen varios hitos caracteristicos (fin del analisis, paso a 
produccion,  etc.)  que  permiten  observar  el  progreso  de  un  proyecto;  el  monitoreo 
permite verificar si los costos y la agenda estan bajo control. 

4.  medicion:  tanto  el  proceso  de  desarrollo  de  software  ejecutado  como  el  sistema 
producido  pueden  ser  medidos,  con  medidas  directas  (como  cantidad  de  modulos  u 
horas-persona,  respectivamente)  o  indirectas  (como  puntos  de  funcion  o  nivel  de 
madurez, respectivamente). 

en  la  practica,  la  forma  especifica  de  ejecutar  las  fases  y  actividades  varia  segun  los  usos  y 
costumbres de cada organizacion y el paradigma de desarrollo de software que se adopte. 

casa central av. espana 1680, valparaiso, chile, fono: 56-32-265 42 42, fax: 56-32-279 75 13 

www.inf.utfsm.cl 

    campus san joaquin av. vicuna mackenna 3939, san joaquin, santiago, chile, fono: 56-2-432 66 09, fax: 56-2432 67 02 

            campus vitacura av. santa maria 6400, vitacura, santiago, chile, fono: 56-2-353 14 88, fax: 56-2-353 14 73 
 

 

iv. 

paradigmas de desarrollo de software 

en la historia de la industria y de la disciplina, numerosos procesos han sido propuestos, y aun 
mas  han  sido  usado  sin  ser  jamas  descritos  formalmente.    para  razonar  y  comparar  estos 
procesos,  se  reconoce  que  en  general  hay  unas  formas  tipicas  de  desarrollar  software, 
llamados paradigmas (palabra originalmente introducido porkuhn en 1960 para describir la 
evolucion de la ciencia, pero adoptado por informatica para estos fines).  un  paradigma  de 
desarrollo  de software es un esquema de trabajo para desarrollar producto, que establece 
procedimientos,  hitos  y  entregables  especificos,  algunas  caracteristicas  clave  de  calidad  del 
proceso, y el tipo de gestion del proyecto. 

la literatura tipicamente distingue los paradigmas o modelos de desarrollo de software segun 
el orden de sus actividades. la taxonomia original de pressman (1993) es aun ampliamente 
utilizada  en  la  industria  (si  bien  en  la  academia  ha  sido  desplazado  por  otras  taxonomias 
razonadas): 

1.  paradigma  secuencial    el  ciclo  de  vida  clasico. basado en  el modelo de cascada 
propuesto  por  royce  (1970)  y  modificado  para  satisfacer  algunas  restricciones 
contractuales de adquisiciones (boehm, 2006). segun la interpretacion secuencial 
que se ha masificado inicialmente los requisitos son definidos, despues el software 
es  desarrollado  (a  su  vez  secuencialmente  el  diseno,  codificacion  y  pruebas),  y  la 
mantencion sucede posterior a la entrega. este paradigma es ingenuo y rigido, ya que 
se  ha  constatado  que  los  sistemas  de  grandes  en  general  no  pueden  ser  definidos  a 
priori; en la actualidad, es usado principalmente con fines didacticos o como esqueleto 
de otros paradigmas. 

2.  prototipado.  un  modelo  iterativo  de  desarrollo  de  software  que  privilegia  la 
confianza  en  la  comunicacion  entre  clientes  y  desarrolladores.    los  requisitos  son 
definidos  empiricamente  a  traves  de  la  creacion  de  modelos  (prototipos)  que  van 
progresivamente aumentando el nivel de detalle del sistema. 

3.  modelo iterativos (especialmente el modelo espiral). basado en el ciclo de vida 
basico  y  en  el  desarrollo  iterativo  o  prototipado,  plantea  una  evolucion  iterativa-
incremental  del  sistema,  en  que  cada  nueva  iteracion  esta  basada  en  evaluacion  de 
valor (por el cliente) y de riesgo (por el desarrollador).  apunta a gestionar proyectos 
de alto riesgo. 

naturalmente,  cada  organizacion  adopta  un  paradigma  de  desarrollo  de  software  (o 
combinacion de ellos) con fines esencialmente practicos: 

4.  escalonar  proyectos  como  conjuntos  regulados  de  actividades,  reduciendo  la 

probabilidad que algunas sean olvidadas o malinterpretadas. 

5.  permitir  a  los  clientes  comprender  y  revisar  el  proyecto,  reconocer  y  validar  sus 

propios roles en el, e identificar areas de ambiguedad si las hubiere. 

6.  los  modelos  son  estratificados,  permitiendo  el  desarrollo  progresivo,  racional  y 

manejable de los componentes del sistema. 

casa central av. espana 1680, valparaiso, chile, fono: 56-32-265 42 42, fax: 56-32-279 75 13 

www.inf.utfsm.cl 

    campus san joaquin av. vicuna mackenna 3939, san joaquin, santiago, chile, fono: 56-2-432 66 09, fax: 56-2432 67 02 

            campus vitacura av. santa maria 6400, vitacura, santiago, chile, fono: 56-2-353 14 88, fax: 56-2-353 14 73 
 

 

7.  permitir  a  desarrolladores  reconocer  sus  propios  roles  en  el  proyecto,  y  adoptar  o 
crear notaciones tipograficas adecuadas para representar estructura, funcionalidades, 
datos y propiedades del sistema. 

8.  finalmente,  y  como  beneficio  principal,  los  modelos  de  proceso  permiten  estimar  la 

calidad de un sistema en desarrollo antes de este completo. 

los  modelos  de  proceso  estandar  son  cada  vez  mas  detallados,  e  incluyen  criterios  que 
permiten medir la calidad paso a paso, tanto del producto como del proceso, para deteccion 
temprana  de  defectos,  como  reaccion  a  la  antigua practica  de  escribir  codigo  y  revisarlo  en 
accion  una  vez  instalado  y  (ojala)  funcionando.    por  ello,  la  identificacion  temprana  de  los 
requisitos  es  esencial  para  la  operacion  normal  de  los  procesos  de  desarrollo  de  software 
usuales  (los  procesos  agiles  prescinden  de  esto,  pero  son  riesgosos  y  requieren  personal 
muy    motivado  y  especializado,  relegandolos  al  desarrollo  de  software  de  alta  exigencia  y 
costo, como startups tecnologicas o astroinformatica). 

tres tendencias importantes han tomado cuerpo en la ultima decada: 

  boehm  (2006),  una  de  las  autoridades  clave  de  la  disciplina,  comenta  que  desde  la 
decada de 1990 la voragine de la industria ha llevado a privilegiar el  time-to-market 
(tiempo  para  llegar  al mercado),  lo  que  se  refleja  en  que  muchos  clientes  solicitan 
productos sin tener claro sus requisitos, dando lugar  a  requisitos  ikiwisi:  "i'm  not 
sure, but i'll know it when i see it" (no estoy seguro, pero sabre cuando lo vea). 

  se  han  consolidado  paradigmas  de  desarrollo  concurrente,  con  modelos  como  el 
espiral o los metodos agiles; los metodos agiles prescinden de muchas actividades de 
control y se enfocan en desarrollo iterativo-incremental con iteraciones rapidas y muy 
ligadas al cliente.  son muy favorecidos por desarrolladores avanzados, pero tambien 
muy  resistidos  por  gerencias;  en  general,  en  chile  solo  son  usados  por  empresas 
pequenas (si bien son los metodos normalmente ensenados en la academia). 

  la  usabilidad  ha  cobrado  una  importancia  mucho mayor,  ya  que  los  desarrollos  son 
guiados  por  clientes  con  productos  y  nichos  especificos  en  mente;  en  muchos 
proyectos  de  desarrollo  de  productos  para  consumidores  (como  apps  moviles),  la 
usabilidad es el factor de exito clave y cuello de botella principal. 

 

casa central av. espana 1680, valparaiso, chile, fono: 56-32-265 42 42, fax: 56-32-279 75 13 

www.inf.utfsm.cl 

    campus san joaquin av. vicuna mackenna 3939, san joaquin, santiago, chile, fono: 56-2-432 66 09, fax: 56-2432 67 02 

            campus vitacura av. santa maria 6400, vitacura, santiago, chile, fono: 56-2-353 14 88, fax: 56-2-353 14 73 
 

