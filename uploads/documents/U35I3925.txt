point

building what 
stakeholders desire

ian alexander

the devil is in the
details of who the
stakeholders are and
what they desire.

t he key to successful systems is build-

ing what the stakeholders desire. in
a way, this point can hardly be gain-
said:  nobody  wants  to  build  what
the stakeholders dont desire. but as
usual, the devil is in the details. 

i  will  contrast  two  examples  to  illus-
trate  what  it  can  mean  to  build  what
stakeholders desire:

 project  a  is  a  role-playing  game  on  a
portable device for the teenage market. 
 project b is an embedded software sys-
tem for controlling a railway lines op-
erations.

project  as  product  manager  is  in  no
doubt  that  the  key  to  success  is  building
what  its  teenage  consumers  want:  excite-
ment,  speed,  a  feeling  of  mastery,  and  so
on.  these  emotional  experiences  are  very
far  from  traditional  requirements,  as
david callele recently argued (emotional
requirements  in  video  games,  proc.
14th ieee intl requirements eng. conf.,
ieee cs press, pp. 299302) and beyond
them,  what  players  want  is  hard  to  pin
down  because  the  market  changes  fast,
and at any moment a competitor (a pow-
erful negative stakeholder) might produce
a game that transforms expectations for all
future products. 

other  stakeholders  include  regulators

who decide on the publics behalf, for in-
stance, whether the game is excessively vi-
olent or sexual. such stakeholders are im-
portantthey can even be show-stopping.
the  regulator,  in  turn,  is  influenced  by
politicians, who respond to public mood.
clearly,  balancing  the  regulators  desires
with the players is essential, but so is de-
feating  the  competition:  building  what
negative stakeholders dont desire. finally,
project  a  is  a  commercial  success  if  it
makes moneythat is, if it satisfies its fi-
nancial beneficiaries, such as company di-
rectors and shareholders.

the onion model in figure 1 illustrates
the  competing  stakeholder  pressures  that
the  product  manager  must  mediate  for
project a.

project  b  is  different.  its  project  man-
ager and lead engineer know that the key
to success is building a railway that works
safely, safely, safely. the safety regulators
approval  is  mandatory,  but  first  the  pro-
ject  must  integrate  all  the  subcontractor
components  to  make  a  system  that  actu-
ally  works.  so,  the  interfaces  specified  in
the  systems  architecture  are  crucial.  in
theory, the system team can work out the
interfaces in advance and impose require-
ments  on  subcontractors  so  that,  for  ex-
ample, a signaling systems output exactly

continued on page 64

6 2

i e e e  s o f t w a r e published by the ieee computer society

0 7 4 0 - 7 4 5 9 / 0 7 / $ 2 5 . 0 0    2 0 0 7  i e e e

counterpoint

dont just dwtty

kent beck

t heres an old saying in software de-

velopment that the users dont know
what they want until you give them
what they asked for. experienced de-
velopers  often  smile  ruefully  when
they  hear  this,  having  been  told  at
least once in their careers that a system they
had  delivered  was  totally  unacceptable
when  it  was  exactly  (as  far  as  they  could
tell)  what  was  requested.  theres  more  to
delivering good software than following or-
ders. here, i describe what positive role de-
velopers  can  play  in  discovering  and  ex-
ploring requirements.

its certainly an exaggeration to say that
the worst thing you can do is deliver exactly
what  the  users  tell  you.  making  promises
and not delivering anything is worse. deliv-
ering what you want to develop without re-
gard  to  what  they  want  is  worse.  but
putting most of yourself on the shelf while
you  develop  is  certainly  far  from  the  best
way to deliver satisfying software.

one  superficial  critique  of  dwtty
(do what they tell you) is that it leads to
lots of change requests. actually, this is a
strength  of  listening  and  responding  to
what  customers  tell  you.  requests  for
change  are  a  sign  that  customers  are  en-
gaged, they care, they are thinking. what-
ever developers do beyond dwtty, they
shouldnt lose this sense that the customers
want to continue improving the system.

theres more 
to delivering good
software than doing
what the customer
tells you.

what  happens  when  developers
dwtty? first, the features requested are
often more expensive than they need to be.
there are generally several ways to imple-
ment  any  given  feature.  by  discussing  a
feature with customers, developers can of-
fer options with their associated costs. sec-
ond, the requested features can lack coher-
ence.  developers  have 
the  unique
advantage of being able to see a whole do-
main with fresh eyes. sometimes they can
uncover  hidden  commonality  between
seemingly  diverse  operations  and  so  dra-
matically  simplify  the  interface.  third,
customers often have a monolithic under-
standing of the system they envision, lead-
ing  to  riskier  development.  it  often  takes
the developers help to see how to slice the
system into incremental releases, each de-
livering value. so, dwtty leads to more
expensive, less coherent systems delivered
in large, risky releases.

aside  from  these  technical  problems,
dwtty suffers from the fatal flaw of lack
of responsibility. hey, dont whine to me.
i just did what i was told isnt a respon-
sible  position.  software  development
works  best  when  everyone  involved  ac-
cepts responsibility for the systems value.
responsible developers apply their creativ-
ity and effort more fully and avoid short-

continued on page 64

0 7 4 0 - 7 4 5 9 / 0 7 / $ 2 5 . 0 0    2 0 0 7  i e e e

march/april 2007 i e e e  s o f t w a r e

6 3

point

continued from page 63

e   w i d er environment

e   c o n t aining system

h

t

h

t

interfacing

system

user/consumer

t

h e   system

maintenance

operator

 competitor
(negative

stakeholder)

pressure

to

innovate

pressure to
make game
enjoyable

 player

 (functional
 beneficiary)

 player
 (normal
operator)

the product 
(a video game)

operational

support

media
regulator

 director,
shareholder
(financial

 beneficiary)

pressure to
make profit

 product
manager
(purchaser)

 politician
(political
beneficiary)

the public

             pressure to
    regulate violent
and sexual imagery

developer

holder, and the project can only make
progress  by  negotiation.  preferably,
less  powerful  stakeholders  desires
arent  trampled  underfoot.  the  onion
model  for  this  case  would  look  very
different from figure 1.

i  hope  these  examples  show  that
phrases like what the stakeholders de-
sire  conceal  a  multitude  of  perils.
dealing  with  those  desires  involves
trade-offs among large opposing forces
that  vary  widely  from  project  to  pro-
ject.  the  first  step  is  to  find  out  who
the stakeholders are, and they will in-
clude  not  only  beneficiaries  but  also
the  negative  stakeholders,  whose  de-
sires should not be met. 

so,  should  we  give  stakeholders
what  they  desire?  its  impossible  to
please everybody, of course, but overall
satisfaction of the key stakeholders de-
sires is crucial for product success.

figure 1. the onion model of video game stakeholder relationships.

fits  the  train.  but  if  the  train  has  al-
ready  been  designed,  the  system  team

faces a  difficult  integration  task.  the
train manufacturer is a powerful stake-

ian alexander is an independent consultant specializing
in requirements engineering for systems in the automotive,
aerospace, transport, telecommunications, and public-service
sectors. contact him at iany@easynet.co.uk.

continued from page 63

counterpoint

cuts that remove value from systems.

there  are  many  alternatives  to
dwtty.  a  binary-thinking  developer
would  say,  well,  if  they  arent  in
charge, then im in charge. this strat-
egy  denies  customers  their  right  to  be
responsible  for  the  system.  the  devel-
oper, with a necessarily shallow under-
standing  of  the  domain,  will  likely
make many wrong decisions, especially
in the critical early development stages.

the question isnt, whos in charge?
but  rather,  how  can  we  work  to-
gether?

the second edition of extreme pro-
gramming explained lists 14 principles
consistent  with  development  excel-
lence. all of them apply to the require-
ments dialogue. i could go through all
14  principles,  but  i  only  have  750
words  and  im  eager  to  see  what  my
worthy  opponent  has  to  say,  so  ill

mention  one  and  let  you  explore  the
rest.  the  principle  of  baby  steps  sug-
gests working in small, concrete steps.
if  we  apply  this  principle  to  require-
ments,  the  requirements  dialogue  will
encourage  everyone  to  achieve  some-
thing  concrete  quickly  and  frequently.
baby  steps  create  feedback,  reduce
wasted  effort,  and  encourage  trust
among the team members. 

overall, a team could manifest these

6 4

i e e e  s o f t w a r e www.computer.org/software

principles in many ways. an extreme-
programming-style  team  might  sit  to-
gether, pair a customer and a developer
for  challenging  tasks,  or  release  soft-
ware to production weekly. a waterfall-
style team might use the same principles
to  hold  joint  design  sessions,  train  the
developers as users of the system to be

replaced,  or  split  the  release  cycle  in
half (two releases a year will encourage
more collaboration than one). 

the  precise  practices  arent  as  im-
portant  as  the  intent  behind  the  prac-
tices.  if  everyone  on  the  team  accepts
responsibility for the systems value, if
developers  commit  to  listening  to  the

customers real needs, if customers di-
gest feedback about their wishes, then
the whole team will accomplish much
more than they would if the developers
just do what they tell me.

kent beck is the director of three rivers institute in
southern oregon. contact him at kent@threeriversinstitute.org.

ian responds

kent responds

kent becks point about just taking orders is well taken,
as is his statement that practices arent as important as in-
tent. if that means appropriate agility for each project, few
would gainsay it. his illustration of a waterfall-style team
using appropriately agile practices such as joint design ses-
sions is very welcome. 

it cant always be right to develop the requirements dur-

ing codingstill less, while concrete is being poured and
metal is being cut. but its certainly right to select a life cycle
that encourages dialogue, with iteration in baby steps.
those steps could be creating mock-ups and prototypes in
any formsketches, diagrams, film, acted scenes, clay mod-
els, whateverfollowed by feedback from stakeholders. 

on a much larger scale, iteration can take place over can-
didate designs that might meet the customers goals. these are
then traded off according to how well theyre predicted to per-
form. the developers role here might be to propose alterna-
tive designs. the customer sets the goals and evaluates the
alternatives against all the stakeholders points of view. if com-
plete agreement isnt reached first time, as is likely, then the
developers explore the refined goals and design options in
search of a better compromise. the detailed requirements ef-
fectively flow from this repeated trade-off cycle.

we seem dangerously close to agreeing that appropri-

ate agility is far better than believing what youre told at the
start. waterfall activities make sense only within an appro-
priate life cyclevery likely, an iterative one.

i would like to thank ian alexander for his clear exposi-

tion of the case for implement customer desires as a devel-
opment metaphor. his diagram, in particular, admirably sup-
ports his points. however, im not convinced that his picture
of development is sufficient to guide projects.

my most serious objection is the lack of feedback loops 

in his model. desires arent a static target to be met or
missed. if together the team can choose to defer a difficult-
but-not-urgent task, and if the customers later decide that the
whole area of functionality neednt be implemented, i would
argue that they have been extremely effective even though
they didnt implement customer desires.

software development at its best is a rich web of relation-
ships among people with different perspectives who choose
to work together on common goals. everyone is responsible
for stating their needs, listening to the needs of others, and
working toward those goals. in the process, they get some of
their needs met and leave others to be met in other ways. its
not just what the customers want (or what the programmers
want, for that matter), its what everyone can accomplish to-
gether that spells success or failure.

v i s i t u s o n l i n e  
w w w . c o m p u t e r. o r g /
s o f t w a r e

the authority on translating software theory into practice, ieee softwarepositions
itself between pure research and pure practice, transferring ideas, methods, and
experiences among researchers and engineers. peer-reviewed articles and columns
by real-world experts illuminate all aspects of the industry, including process im-
provement, project management, development tools, software maintenance, web
applications and opportunities, testing, usability, and much more.

march/april 2007 i e e e  s o f t w a r e

6 5

