estimaciones

ingenieria	de	software

hernan	astudillo	&	gaston	marquez	
departamento	de	informatica	
universidad	tecnica	federico	santa	maria

utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

contexto

 partido	de	chile	

 se	desea	realizar	un	asado	con	los	amigos	y,	para	lo	anterior,	se	debe	estimar	la	cuota	por	
persona	

 se	quiere	comer	carne?	pollo?	ensalada?	otros?	

 posta	paleta?	asado	carnicero?	alitas	de	pollo?	pechuga?	

 bebidas?	cervezas?	carbon?	

 	al	parecer,	para	estimar	la	cuota	por	persona	se	deben	considerar	muchos	factores	

 no	es	lo	mismo	colocar	$5.000		p/p	que	$10.000	

 en	isw	ocurre	lo	mismo	

 existen	atributos	y	caracteristicas	que	se	deben	considerar	al	momento	de	estimar	

 con	el	objetivo	de	predecir	(anticipar	con	cierto	grado	de	certeza)

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

contexto

utfsm-di-2016
utfsm-di-2016

productividad	de	software

utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

productividad	de	software	[1]

 en	general,	entradas	/	salidas	
 que	tipos	de	salidas?	

 lines	of	codes	(loc)?	
 tokens?	
 function	points	(fp)?	
 story	points?	
 orientacion	a	objetos?	
 webmet?	

 que	tipos	de	entrada?	

 $?	
 esfuerzo?	
 productividad?	

 loc/$,	loc/hh,	fp/hh,	sp/$?

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

productividad	de	software	[2]

 concepto	no	facil	de	definir	
 pero,	relativamente	facil	de	mejorar	

 reduccion	del	esfuerzo	

 mejores	habilidades,	herramientas,	metodos,	estructuras	
organizacionales,	planificacion	y	control	
 necesitamos	mejorar	el	proceso	

 hacer	lo	mismo	o	similar

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

productividad	de	software	[3]

 factores	que	afectan	la	productividad	

 humanos	
 procesos	
 producto	
 tecnologia	
 otros

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

productividad	de	software	[4]

 modelos	de	productividad	

 objetivos	
 generales	
 significativos	
 independientes

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

productividad	en	estandares	internacionales

 el	estudio	realizado	por	[cheikhi	et	al.	2012]	describe	como	la	
productividad	se	ve	reflejada	en	los	siguientes	estandares	
internacionales:	
 iso	9126	
 ieee	std.	1045	

 como	conclusion	de	su	trabajo,	los	autores	han	determinado	que	no	
existe	un	unico	modelos	que	integre	la	productividad	completamente

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

iso	9126	[1]

 la	productividad	en	la	norma	iso	9126	se	define	como	un	atributo	de	
calidad	
 en	la	norma	se	menciona	dos	conceptos:	productividad		y	eficacia	
 se	define	como	la	capacidad	del	producto	de	software	para	habilitar	
a	los	usuarios	a	gastar	los	montos	apropiados	de	recursos	en	relacion	a	
la	efectividad	lograda	en	un	contexto	especifico	de	uso	
 la	eficacia	se	define	como	la	capacidad	del	producto	de	software	
para	habilitar	a	los	usuarios	para	alcanzar	los	objetivos	especificos	con	
exactitud	y	completitud	en	un	contexto	especifico

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

iso	9126	[2]

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

ieee	std.	1045

 el	objetivo	de	este	estandar	es	estandarizar	la	forma	en	que	se	mide	la	
productividad	y	esfuerzo	de	software	
 la	productividad	es	expresada	en	terminos	de	salida/entrada	
 este	estandar	es	mas	util	para	medir	la	productividad	en	artefactos	de	
los	productos	de	software	que	se	generan	como	salida	y	no	para	el	uso	
del	producto	de	software

utfsm-di-2016
utfsm-di-2016

estimacion	del	esfuerzo

utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

estimacion	del	esfuerzo	[1]

 estimacion,	arte	o	ciencia?	
 valor	del	esfuerzo	estimado	correctamente	

 subestimacion:	perdida	economica	
 sobreestimacion:	baja	competencia	

 se	necesita	una	combinacion	de	modelos,	datos	historicos,	
experiencia	y	sentido	comun

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

estimacion	del	esfuerzo	[2]

 estimacion:	prediccion	de	tiempo	y	costo	requerido	para	completar	u	
proyecto.	
 enfoques	de	la	estimacion	

 opiniones	de	expertos/juicios	
 analogias	
 descomposiciones	
 modelos	matematicos

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

estimacion	del	esfuerzo	[3]

 buenos	criterios	para	los	modelos	

 validacion	
 objetividad	
 facil	de	usar	
 robusto	
 transportable

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

estimacion	del	esfuerzo	[4]

 categorias	de	los	modelos	

 historicos	
 estadisticos	
 teoricos	
 compuestos

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

modelos	historicos

 modelos	historicos	o	experimentales	
 tipos	de	modelos	mas	utilizados	
 los	expertos	hacen	sus	juicios	basados	en	

 experiencia	
 intuicion	
 informacion	historica	accesible

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

modelos	estadisticos

 se	basan	en	analisis	estadisticos	para	determinar	parametros	y	
relaciones	entre	parametros,	por	ejemplo,	para	producir	ecuaciones	
matematicas	(regresion).	
 por	ejemplo,	en	[chulani	et	al.	1998]	aplican	analisis	bayesiano	para	la	
mejor	prediccion	del	rendimiento	en	el	modelo	cocomo	
(constructive	cost	model)	ii

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

modelos	teoricos	[1]

 estan	basados	en	teorias	de	como	el	ser	humano	trabaja	durante	el	
desarrollo	de	software		
 a	su	vez,	tambien	estan	basados	en	leyes	matematicas	que	el	proceso	
de	desarrollo	de	software	sigue	
 por	ejemplo,	el	modelo	putnam

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

modelos	teoricos	[2]

 size=	tamano	del	producto.	puede	ser	loc,	esloc	(effective	source	lines	of	
code)	
 b=	es	un	factor,	una	funcion	del	tamano	del	proyecto	que	va	desde	0.16	para	
productos	con	5000	-	15000	loc	hasta	0.39	para	productos	con	+70000	loc	
 productivity=	proceso	de	productividad	del	software	
 effort=	total	de	esfuerzo	aplicado	en	el	proyecto	medido	en	personas/ano	
 time=	el	tiempo	requerido	del	proyecto	en	anos

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

modelos	compuestos

 incorporan	una	combinacion	de	ecuaciones	analiticas,	ajustes	
estadisticos	y	juicios	de	expertos	
 por	ejemplo,	cocomo	(constructive	cost	model)

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

causas	de	una	mala	estimacion

 frecuentes	cambios	en	los	requisitos	
 tarea	omitidas	
 los	usuarios	no	entienden	completamente	los	requisitos	
 pobre	comunicacion	entre	analistas	y	usuarios	
 pobre	o	imprecisa	definicion	del	problema

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

un	enfoque	para	estimar

 entrada:	definicion	del	problema	

 paso	1:	estimacion	del	tamano	(function	points)	
 paso	2:	transformacion	del	tamano	(fp	a	kloc)	
 paso	3:	esfuerzo	y	programacion	de	estimacion	(cocomo)	
 paso	4:	esfuerzo	y	programacion	de	distribucion	de	tareas	
(cocomo)	
 paso	5:	normalizacion	del	calendario	de	actividades	(esterling)	

 salida:	programacion	y	costos

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

relacion	entre	planificacion	y	estimacion

 la	estimacion	es	la	base	de	la	planificacion,	pero	ambos	entregan	
diferente	informacion	
 en	general,	planificar	para	satisfacer	ciertos	objetivos	es	confundido	
con	objetivos	de	estimacion	
 no	separar	estimacion	y	planificacion	resulta	en	estimaciones	no	
reales	y	malos	planes

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

comunicando	planes	y	estimaciones

 generalmente	los	stakeholders	no	se	comunican	correctamente	
 en	varias	ocasiones,	la	estimacion	es	requerida	cuando	la	planificacion	
realmente	es	solicitada	
 no	siempre	se	puede	satisfacer	los	objetivos,	debido	a	que	algunas	
veces	es	necesarios	clarificar	cuales	pueden	ser	sacrificados	
(compromisos)

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

estimacion	como	probabilidad

 error	comun:	presentar	la	estimacion	como	un	simple	valor	numerico	
 si	se	desea	mostrar	una	simple	estimacion,	se	debe	estar	seguro	de	
que	es	realmente	una	estimacion	y	no	un	objetivo	
 una	estimacion	presentada	de	la	siguiente	forma	18-24	semanas	es	
mas	util

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

que	es	una	buena	estimacion?

 definicion	comun:	una	buena	estimacion	es	aquella	que	entrega	
resultados	con	un	25%	de	error	el	75%	de	las	veces	
 una	buena	estimacion	es	aquella	en	donde	el	project	manager	tiene	
suficiente	informacion	para	que	pueda	tomar	las	decisiones	correctas	
con	el	objetivo	de	satisfacer	necesidades

utfsm-di-2016
utfsm-di-2016

cocomo

utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

cocomo	[1]

 el	modelo	constructivo	de	costos	(cocomo)	es	utilizado	en	proyecto	
de	software	para	estimar	los	costos	en	funcion	de	tres	sub-modelos:	
basico,	intermedio	y	avanzado	
 basico:	estima	el	costo	del	proyecto	(pequeno-mediano)	en	funcion	
de	numero	de	lineas	de	codigo	estimadas	
 intermedio:	se	utiliza	para	estimaciones	mas	complejas.	este	incluye	
15	atributos	(dentro	de	4	categorias)	del	software	para	determinar	
el	costo	del	proyecto	
 avanzado:	incorpora	las	caracteristicas	del	modelo	intermedio	y	se	
analiza	cada	paso	del	proceso	de	ingenieria	de	software

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

cocomo	[2]

 los	15	atributos	ordenados	por	categorias	
(1)	atributos	del	producto	
																									rely:	garantia	de	funcionamiento	requerida	al	software	
																									data:	tamano	de	la	base	de	datos	
																									cplx:	complejidad	del	producto	
(2)	atributos	de	la	maquina	
																									time:	restriccion	de	tiempo	de	ejecucion	
																									stor:	restriccion	del	almacenamiento	principal	
																									virt:	volatilidad	de	la	maquina	virtual	
																									turn:	tiempo	de	respuesta	del	ordenador	
(3)	atributos	del	personal	
																									acap:	capacidad	del	analista	
																									aexp:	experiencia	en	la	aplicacion	
																									pcap:	capacidad	del	programador	
																									vexp:	experiencia	en	maquina	virtual	
																									lexp:	experiencia	en	lenguaje	de	programacion	
(4)	atributos	del	proyecto	
																									modp:	practicas	de	programacion	modernas	
																									tool:	utilizacion	de	herramientas	software	
																									sced:	plan	de	desarrollo	requerido.

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

cocomo	[3]

 por	otro	lado,	cocomo	define	tres	modos	de	desarrollo	o	tipos	de	proyectos:	

 organico:	proyectos	relativamente	sencillos,	menores	de	50	kdlc	lineas	de	
codigo,	 en	 los	 cuales	 se	 tiene	 experiencia	 de	 proyectos	 similares	 y	 se	
encuentran	en	entornos	estables	
 semi-acoplado:	proyectos	intermedios	en	complejidad	y	tamano	(menores	
de	300	kdlc),	donde	la	experiencia	en	este	tipo	de	proyectos	es	variable,	y	
las	restricciones	intermedias	
 empotrado:	 proyectos	 bastante	 complejos,	 en	 los	 que	 apenas	 se	 tiene	
experiencia	 y	 se	 engloban	 en	 un	 entorno	 de	 gran	 innovacion	 tecnica.	
ademas	se	trabaja	con	unos	requisitos	muy	restrictivos	y	de	gran	volatilidad

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

ejemplo

 proyecto:	gestion	de	inventarios	
 para	este	proyecto,	se	usara	el	modelo	intermedio,	dado	que	realiza	
las	estimaciones	con	bastante	precision.	
 luego	las	formulas	seran	las	siguiente	

c

 e	=	esfuerzo	=	akldc		fae	(persona	x	mes)	
 t	=	tiempo	de	duracion	del	desarrollo	=	cesfuerzo	(meses)	
 p=	personal	=	e/t	(personas)

d

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

ejemplo

 para	calcular	el	esfuerzo,	se	necesita	hallar	la	variable	kdlc	(kilo-lineas	
de	codigo),	donde	los	pf	son	261,36	(dato	conocido)	y	las	lineas	por	
cada	pf	equivalen	a	32	(visual	basic,	dato	conocido)	
 luego,	si	se	sabe	que	son	32	ldc	por	cada	pf,	por	el	hecho	de	ser	
visual	basic	el	resultado	de	los	kdlc	sera	el	siguiente:	
 kldc=	(pf		lineas	de	codigo	por	cada	pf)/1000	=	(261,36*32)/
1000=		8,363		kdlc

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

ejemplo

 dado	lo	anterior,	para	este	caso	el	tipo	de	proyecto	organico	sera	el	
mas	apropiado,	ya	que	el	numero	de	lineas	de	codigo	no	supera	los	50	
kldc,	y	ademas	el	proyecto	no	es	muy	complejo.	entonces,	los	
coeficientes	que	usaran	seran	las	siguientes:

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

ejemplo

 y	por	otro	lado,	se	debe	obtener	la	variable	fae,	la	cual	se	obtiene	
mediante	la	multiplicacion	de	los	valores	evaluados	en	los	diferentes	
15	atributos.	
 en	la	siguiente	slide	se	mostrara	la	tabla

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

ejemplo

 fae=1,15*1,00*0,85*1,11*1,00*1,00*1,07*0,86*0,82*0,70*1,00*0,95*1,00*0,91*1,08=	0,53508480

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

ejemplo

 justificacion	

 atributos	de	producto	

 fiabilidad	requerida	del	software:	si	se	produce	un	fallo	por	el	
pago	de	un	pedido,	o	fallo	en	alguna	reserva,	etc...	puede	
ocasionar	grandes	perdidas	a	la	empresa	(valoracion	alta).	
 tamano	de	la	base	de	datos:	la	base	de	datos	del	producto	sera	
de	tipo	estandar	(valoracion	nominal).	
 complejidad	del	producto:	la	aplicacion	no	va	a	realizar	calculos	
complejos	(valoracion	baja).

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

ejemplo

 justificacion	

 atributos	de	la	maquina	

 restricciones	del	tiempo	de	ejecucion:	en	los	requerimientos	se	exige	
alto	rendimiento	(valoracion	alta)	
 restricciones	del	almacenamiento	principal:	no	hay	restricciones	al	
respecto	(valoracion	nominal)	
 volatilidad	de	la	maquina	virtual:	se	usaran	sistemas	de	la	familia	
windows	(valoracion	nominal)	
 tiempo	de	respuesta	de	la	maquina:	debera	ser	interactivo	con	el	
usuario	(valoracion	alta)

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

ejemplo

 justificacion	

 atributos	del	personal	

 capacidad	del	analista:	capacidad	alta	relativamente,	debido	a	la	experiencia	en	
analisis	en	proyecto	similar	(valoracion	alta)	
 experiencia	en	la	aplicacion:	se	tiene	cierta	experiencia	en	aplicaciones	de	esta	
envergadura	(valoracion	muy	alta)	
 capacidad	de	los	programadores:	teoricamente	debera	tenerse	una	capacidad	muy	
alta	por	la	experiencia	en	anteriores	proyectos	similares	(valoracion	muy	alta)	
 experiencia	en	s.o.	utilizado:	con	windows	8	professional	la	experiencia	es	a	nivel	
usuario	(valoracion	nominal)	
 experiencia	en	el	lenguaje	de	programacion:	es	relativamente	alta,	dado	que	se	
controlan	las	nociones	basicas	y	las	propias	del	proyecto		(valoracion	alta)

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

ejemplo

 justificacion	

 atributos	del	proyecto	

 practicas	de	programacion	modernas:	se	usaran	practicas	de	
programacion	mayormente	convencional	(valoracion	nominal)	
 utilizacion	de	herramientas	software:	se	usaran	herramientas	
estandar	que	no	exigiran	mucha	formacion,	de	las	cuales	se	
tiene	cierta	experiencia	(valoracion	alta)	
 limitaciones	de	planificacion	del	proyecto:	existen	pocos	limites	
de	planificacion.	(valoracion	baja)

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

ejemplo

c

1,05

d

 calculo	del	esfuerzo	del	desarrollo	
e	=	akldc			fae	=	3,2		(8.363)					0,53508480	=	15,91	personas	/mes	
 calculo	del	tiempo	de	desarrollo	
t	=	c		esfuerzo	=	2,5		(15,91)						=	7,15	meses	
 productividad	
pr	=	ldc/esfuerzo	=	8363/15,91	=	525	,64	ldc/personas	mes	
 personal	promedio	
p	=	e/t	=	15,91/7,15	=	2,22	personas

0,38

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

ejemplo

 segun	estas	cifras	sera	necesario	un	equipo	de	3	personas	trabajando	
alrededor	de	7	meses.	pero,	debido	a	que	el	desarrollo	del	proyecto	
debe	realizarse	en	un	plazo	3	meses,	incrementaremos	a	6	personas	el	
numero	de	personas	del	equipo	de	proyecto	(ya	que	15,91/3	nos	da	
alrededor	de	este	resultado).	
 asi	 pues	 tendremos	 un	 equipo	 formado	 por	 1	 jefe	 de	 proyecto,	 2	
analistas,		2	programadores	y	1	responsable	de	calidad.

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

cocomo	ii	[1]

 este	modelo	permite	realizar	estimaciones	en	funcion	del	tamano	del	
software,	y	de	un	conjunto	de	factores	de	costo	y	de	escala.		
 los	 factores	 de	 costo	 describen	 aspectos	 relacionados	 con	
la	
naturaleza	 del	 producto,	 hardware	 utilizado,	 personal	 involucrado,	 y	
caracteristicas	propias	del	proyecto.		
 el	 conjunto	 de	 factores	 de	 escala	 explica	
las	 economias	 y	
deseconomias	 de	 escala	 producidas	 a	 medida	 que	 un	 proyecto	 de	
software	incrementa	su	tamano.

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

cocomo	ii	[2]

 cocomo	
ii	 (http://csse.usc.edu/csse/research/cocomoii/
cocomo_main.html)	 posee	 tres	 modelos	 denominados	 composicion	
de	aplicacion,	diseno	temprano	y	post-arquitectura.		
 cada	 uno	 de	 ellos	 orientados	 a	 sectores	 especificos	 del	 mercado	 de	
desarrollo	 de	 software	 y	 a	 las	 distintas	 etapas	 del	 desarrollo	 de	
software.

utfsm-di-2016
utfsm-di-2016

ingenieria	de	software		sesion	1:	introduccion

agile	cocomo	ii

 agile	cocomo	ii	(http://csse.usc.edu/csse/research/agilecocomo/)	
 facilita	 la	 exactitud	 comparativa	 de	 estimacion	 de	 costo	 de	
proyectos	de	software	
 fue	 desarrollado	 para	 reducir	 la	 complejidad	 de	 la	 estimacion	 de	
costos	usando	cocomo	ii	mientras	provee	informacion	exacta	de	
estimacion	de	costo	y	esfuerzo

utfsm-di-2016
utfsm-di-2016

estimaciones

ingenieria	de	software

hernan	astudillo	&	gaston	marquez	
departamento	de	informatica	
universidad	tecnica	federico	santa	maria

utfsm-di-2016

