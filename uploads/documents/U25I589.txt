focus

process diversity

the scrum software
development process
for small teams

in todays software
development
environment,
requirements often
change during the
product
development life
cycle to meet
shifting business
demands, creating
endless headaches
for development
teams. we discuss
our experience in
implementing the
scrum software
development
process to address
these concerns.

linda rising and norman s. janoff, ag communication systems

a t  ag  communication  systems,  software  development  teams

range in size from two to several hundred individuals. intuitively,
the development process thats appropriate for very large teams
wont work well for tiny teams and vice versa. in our organiza-
tion, process diversity means adopting a flexible approach to development
processes so that each team can apply what works best. in experimenting
with the scrum software development process, we found that small teams 

can  be  flexible  and  adaptable  in  defining
and  applying  an  appropriate  variant  of
scrum. this article describes our experience
implementing this process.

why scrum?

as members of the software technology
group,  our  group  is  responsible  for  intro-
ducing new technologies and processes into
our  organization  at  ag  communication
systems  in  phoenix,  arizona.  we  research
new approaches and sponsor their introduc-
tion and growth. we also conduct develop-
ment project checkups for ongoing projects
and postmortems for completed ones. 

in our periodic postmortems and check-
ups,  we  noticed  some  recurring  problems
for our new business opportunity (nbo)
projects. figure 1 lists some comments aris-

ing  from  projects  at  our  organization  that
faced significant challenges.

in  the  new  telecommunications  market
where our company operates, change is over-
whelming. software developers have always
complained  about  changing  requirements,
but  in  traditional  approaches  they  assumed
they would understand the requirements be-
fore moving on to the next phase. in the cur-
rent environment, however, project require-
ments might be unclear or unknown even as
the project gets underway. indeed, the mar-
ket might not be definedit might even be
that no one clearly understands the product
under development. 

most  development  teams  respond  with,
make  the  chaos  go  away!  give  us  better
requirements! unfortunately or not, chaos
is the reality in this new business environ-

26

i e e e  s o f t w a r e

j u l y / a u g u s t  2 0 0 0

0 7 4 0 - 7 4 5 9 / 0 0 / $ 1 0 . 0 0    2 0 0 0  i e e e

figure 1. participant
comments from proj-
ects facing challenges.

mentas  software  devel-
opers we must learn how
to  meet  customer  needs
and turn this chaos to our
advantage.

in  seeing  that  some  of
our  nbo  projects  were
more  successful  than  oth-
ers, we struggled to exam-
ine the postmortem data to
learn  the  secrets  of  those
successful  projects.  here
are  some  comments  from
successful teams:

i we  did  the  first  piece  and  then  reesti-

matedlearn as you go!

i we  held  a  short,  daily  meeting.  only

those who had a need attended.

i the  requirements  document  was  high-
level and open to interpretation, but we
could always meet with the systems en-
gineer when we needed help.

about this time, we discovered the scrum
web  sites    (www.controlchaos.com/safe  and
www.jeffsutherland.org) and read a paper pre-
senting patterns for using the scrum software
development  process  from  the  1998  pattern
language of programs conference.1  from the
scrum  web  sites  we  learned  that  scrum  is  a
process for incrementally building software in
complex  environments.  scrum  provides  em-
pirical controls that allow the development to
occur as close to the edge of chaos as the de-
veloping organization can tolerate. 

the scrum software development process
described in this article developed in a col-
laboration between advanced development
methods and vmark software. both com-
panies  were  reporting  breakthrough  pro-
ductivity. this approach overlapped signifi-
cantly with what we saw in postmortems of
successful  projects.  our  organization  has
long used patterns successfully, not just for
design but  for organization  and process as
well.2,3 many  existing  patterns  supported
what  we  learned  about  scrum  and  saw  in
the postmortem data (see the whats a pat-
tern? sidebar). for example, scrum advo-
cates the use of small teamsno more than
10  team  members.  jim  copliens  size  the
organization pattern recommends 10-per-
son  teams,4 while  fred  brooks  argues  that
the  small  sharp  team,  which  by  common

i we need to do a better job of change management. we had too many outside distractions.
i we need customer feedback during the iterative development approach were taking.
i the users gave us a huge list of requirements. we knew we werent going to be able to

deliver everything they wanted.

i development took place in focused chaos, and there was no one to go to with questions.
we need a way to structure the chaos somehow, because all nbos must deal with that.

i we have been used to thinking in terms of years for development; now we have to turn out

products in months.

i were chasing an emerging market. it changes weekly.
i we wasted a lot of time estimating and developing test plans for features that we never

developed. 

i we should have cancelled this project earlier. it took almost two years to recognize that. 
i we need well-defined phases and someone who is close enough to see progress and deter-

mine what we can check off.

whats a pattern?

in the late 1970s, two books appeared, written by christopher alexan-

der and his building architect colleagues. the timeless way of building and
a pattern language presented alexanders description of recurring problems
in creating cities, towns, neighborhoods, and buildings, and the solutions to
these problems.1,2 he used the pattern form to document the problems and
their solutions.

each pattern describes a problem that occurs over and over again in
our environment and then describes the core of the solution to that
problem in such a way that you can use this solution a million times
over without ever doing it the same way twice.2
software professionals have also observed recurring problems and solu-

tions in software engineering. there is evidence of patterns at all levels of
software development, from high-level architecture to implementation, testing,
and deployment. there is considerable work going on to apply this technol-
ogy to software engineering. patterns go a long way toward capturing what
experts know, letting them share that knowledge with others.

on the surface, a pattern is simply a form of documentation. pattern au-
thors document solutions they have observed across many software projects.
experienced designers read these patterns and remark, sure, ive done
thatmany times!

this kind of documentation captures knowledge, previously found only in

the heads of experienced developers, in a form that is easily shared.

patterns are not theoretical constructs created in an ivory tower; they are
artifacts that have been discovered in multiple systems. in patterns, the solu-
tion is one that has been applied more than twice. this rule of three en-
sures that the pattern is documenting tried and true applications, not just a
good idea without real use behind it.

the approach calls to mind the notions of cohesion and coupling ed your-

don and larry constantine developed during many late friday afternoon
postmortem sessions, discussing lessons learned from past projects.3 the co-
hesion and coupling ideas captured qualities of real systems. the guidelines
were not theoretical musings, but rested on observations of system capabili-
ties that made life easier for developers and maintainers.

this is true for all patterns.

references
1. c.a. alexander, the timeless way of building, oxford univ. press, new york, 1979.
2. c.a. alexander et al., a pattern language, oxford univ. press, new york, 1977.
3.

e. yourdon and l. constantine, structured design, prentice hall, englewood cliffs, n.j., 1978.

j u l y / a u g u s t   2 0 0 0

i e e e  s o f t w a r e

27

experience reports

the following reports summarize
three diverse software development
teams experience with scrum at ag
communication systems. the a-team
developed a new multiplatform simulator
for the internal use of our gtd-5 eax
switching system software developers.
the b-teams focus was a new product
in the small call center market. the c-
team developed a new feature for the
gtd-5 eax switching system.

a-team

a-teams new leader called for a
project checkup. as a result of some
problems that surfaced during the
checkup, we offered to give a short
scrum presentation. the team decided to

pilot a one-month sprint. to provide
some on-the-job training in the ap-
proach and also to learn how this team
would adapt the approach to its appli-
cation, we sat in on the scrum meetings.

at first, the team was uneasy about
spending a lot of time in daily meetings
and proposed holding sprint meetings
every other day. the schedule of mon-
day, wednesday, and friday one week,
followed by tuesday and thursday of
the following week seemed to work best.
during these meetings, the team began
to grow together and display increasing
involvement in and delight with others
successes. the team completed a suc-
cessful sprint, with the planned compo-
nents delivered on time.

i give it time to get started before expecting big results. it gets better as the

team gains experience.

i tasks for a sprint must be well quantified and achievable within the sprint time

period. determine the sprint time by considering the tasks it contains.

i tasks for sprints must be assigned to one individual. if the task is shared, give

one person the primary responsibility.

i sprint tasks might include all design-cycle phases. we set goals related to fu-

ture product releases in addition to current development activity.

i scrum meetings need not be daily. two or three times a week works for us.
i the scrum master must have the skill to run a short, tightly focused meeting.
i stick to the topics of the sprint. its very easy to get off topic and extend what

was supposed to be a 10 to 15 minute meeting into a half-hour or more.

i some people are not very good at planning their workload. sprint goals are

an effective tool for keeping people on track and aware of expectations.

i ive noticed an increase in volunteerism within the team. theyre taking an in-

terest in each others tasks and are more ready to help each other out.

i the best part of scrum meetings has been the problem resolution and clearing

of obstacles. the meetings let the team take advantage of the groups experi-
ence and ideas.

figure a. a-teams team leader comments.

the team began to cooperate almost
immediately. the changes happened be-
fore our eyes. one plausible explanation
is that our developers are superb engi-
neers; they love to solve problems. when
one team member shares an obstacle in
the scrum meeting, the entire teams re-
sources come together to bear on that
problem. because the team is working
together toward a shared goal, every
team member must cooperate to reach
that goal. the entire team immediately
owns any one individuals problems. 
detailed problem solving does not

happen in the meeting, of courseonly
an offer of help and an agreement to
meet after the scrum meeting. for exam-
ple, a team member would say, i ran into
a problem. typical responses would be,
i had that problem a couple of weeks
ago. i can help with that. lets talk offline;
i know who is working in that area. ill
help you get in touch with them; or im
having the same problem myself. lets get
together after the meeting and talk about
it. we immediately noticed an increase
in volunteerism in the team.

the celebration of small successes

was also evident. at every meeting, as
small tasks were completed and the
team could see progress toward the
sprints goal, everyone rejoiced. on
the sprints last day, we could feel the
excitement as the responses around
the table were, i finished my task! i
finished my task! i finished my task!
they did it. they reached their goal
together. 

figure a lists comments from the
team leader at the end of the sprint.

our biggest outcome from this pilot

came in the definition of the scrum mas-
ters task. we originally thought that this
role would be hard to fill: we needed
someone who could facilitate a tight

consensus shouldnt exceed 10 people.5 be-
cause brooks, coplien, and postmortems of
successful teams all support this and many
other scrum tenets, we felt confident about
undertaking a pilot project.

although  most  of  our  nbo  teams  were
small, some had grown to exceed the limit of
10. we thought initially that we could simply

divide larger teams into collections of smaller
subteams, each no larger than 10. we found
that when the subteams are independent and
the interfaces well defined, this works. when
the overlap is considerable and the interfaces
poorly  understood,  the  benefits  are  not  as
great.  clearly,  this  is  not  an  approach  for
large, complex team structures, but we found

28

i e e e  s o f t w a r e

j u l y / a u g u s t  2 0 0 0

meeting, keep everyone on track and
solve problems on the fly. the a-team
experience taught us that the team
solves the problemsor most of them.
the team still needs a capable scrum
masters guidance, but the team ad-
dresses and resolves most issues.

after this pilot project, we continued to
present the scrum overview at team meet-
ings and to leaders of various business
units: we took the scrum story to both the
grassroots level and to management.
whenever we detected a flicker of inter-
est, we volunteered to work with the team
to implement scrum. once the team be-
gan to use the process, we attended the
scrum meetings in the first sprint to pro-
vide guidance, lend moral support, and
share successful experience across teams.
we saw first hand what worked well for
us and what teams learned about things
that we could adapt for our environment.
this was process diversity in action. teams
could modify scrum to meet the teams
needs. we could help them tailor the
process based on what we had learned.

b-team

todays chaotic telecommunications
business environment reflects back on
development teams. a teams software
developers might need to simultaneously
support the present release in the field,
develop new features for the next release,
and estimate features for a future release.
management might also tap some of the
developers for other projects.

the b-team found itself in this situa-
tion. one week into their first sprint, the
company made a major strategic
change that significantly affected the
backlog items committed for delivery.
should the team violate a cardinal
scrum principle by letting outside fac-
tors affect the sprint? painful as it was,

the team decided to modify the backlog
to reflect the new strategy. they consid-
ered the outside influence a global
change event, not the typical occur-
rence of a new or modified feature. we
learned that rules for any approach
must be considered in light of the over-
all business context. any rule is just a
rule, and if there are compelling busi-
ness reasons, no process should stand
in the way of making the best decision
for the overall project.

scrum works best when each devel-
oper focuses exclusively on the sprint. b-
team developers had numerous responsi-
bilities in addition to the sprints backlog
items. as a consequence, the team over-
committed itself. in scrum, overcommit-
ment becomes visible very quickly. rapid
feedback helps keep developer commit-
ment aligned with the goals of a time-
boxed sprint.

b-teams scrum master used an excel

spreadsheet to track the backlog items,
sorting the backlog by person and by
priority, for each sprint. some team
members reported backlog completions
in every scrum meeting, while others
could only report partial progress. to
address the partial-progress reporting,
the team tried to define task granularity
to allow completion of at least two tasks
per week. if tracking the backlog be-
comes too complicated, though, it sug-
gests that perhaps the team is trying to
make the process too difficult.

during the daily meetings, the scrum
master would call attention to backlog-
item priority. this was especially helpful
for new team members, who might
have gone off in another direction. the
b-team completed a series of incremen-
tal sprints that led to a product pre-
sently in market trials with a number of
customers.

c-team

we tried applying some of the scrum

development process for preliminary
testing and bug fixing for a c-team fea-
ture. the team was scheduled for four
testing times in eight days, so they
planned a half-hour scrum meeting be-
fore and between each test time.

during the brief team meetings, team

members could ensure that the proper
load was used for the next scheduled test
time. they redefined some testing proce-
dures to make things go faster. the meet-
ings let all testers hear what was planned
and volunteer to work in the next test time.
the meeting also served to remind every-
one of current load problems and events
planned for the next couple of days.

the group as a whole decided the kind

of testing to perform in the next test time,
not just the tester who worked that test time.
added fixes were announced to the group.
the scrum master announced the lat-

est load schedule and informed every-
one of information from outside the
group that might have come in over e-
mail but was missed by someone on the
team. during one meeting, the scrum
master made a phone call to check the
load status to help decide whether to go
ahead with the next scheduled test time.
we saw that the regularly scheduled
meeting gave the team an efficient way
for sharing information and tracking
progress. the team met its goal. the
feature was ready for integration testing
at the end of the sprint.

even though all three teams imple-

mented different instantiations of scrum,
they were all enthusiastic about the ap-
proach and felt that the experience had
been a successful one. they were all
willing to continue using it on their next
release or project. 

that  even  small,  isolated  teams  on  a  large
project could make use of some elements of
scrum. this is true process diversity.

while  conducting  a  project  checkup,  we
thought  that  scrum  might  address  some  of
the  issues  facing  the  particular  team.  after
we  described  the  approach  as  we  then  un-
derstood  it,  the  team  decided  to  try  scrum

and became our first pilot project. we didnt
understand a lot about the approach, so we
learned as we went along, as did the team.
the pilot project and each succeeding proj-
ect taught us more about what worked for
each group and what components would ad-
dress particular needs.

the  experience  reports  sidebar  de-

j u l y / a u g u s t   2 0 0 0

i e e e  s o f t w a r e

29

scribes  three  of  our  experiences  in  imple-
menting the scrum approach.

scrum

a scrum is a team of eight individuals in
rugby.  everyone  in  the  pack  acts  together
with  everyone  else  to  move  the  ball  down
the field.

for  those  who  know  rugby,  the  image  is
clear.  teams  work  as  tight,  integrated  units
with each team member playing a well-defined
role and the whole team focusing on a single
goal. in development teams, each team mem-
ber must understand his or her role and the
tasks  for  each  increment.  the  entire  team
must have a single focus. the priorities must
be clear. as we now describe, the scrum de-
velopment process facilitates this team focus. 

how does scrum work?

scrum is a software development process
for  small  teams.  as  coplien  and  brooks
have  shown,  small  teams  that  work  inde-
pendently  are  more  effective.4,5 well-
seasoned  research  in  social  dynamics  sup-
ports this view. the phenomenon called so-
cial  loafing,  identified  as  early  as  1927,
empirically  measured  individual  contribu-
tion  to  a  group  effort.6 using  a  gauge  at-
tached to a rope, the study found that indi-
viduals  pulling  the  rope  averaged  138.6
pounds  of  pressure.  however,  groups  of
three averaged only 2.5 times the individual
rate, and groups of eight averaged less than
four times the individual rate.

as in all projects, there must be an initial
planning phase. during this phase, the proj-
ect team must develop an architecture and
identify  a  chief  architect.  during  develop-
ment, the team should be prepared to make
changes to this architecture, but they need a
plan,  an  architecture,  and  a  chief  architect
at the start. the chief architect defines the
development  projects  vision  based  on  this
architecture and ensures that visions consis-
tency  throughout  all  the  development
phases.  copliens  pattern  architect  con-
trols product  supports this understanding:
the architect role should advise and con-
trol  the  developer  roles  and  communicate
closely with the developers.4

after  initial  planning,  a  series  of  short
development phases, or sprints, deliver the
product  incrementally.  a  sprint  typically
lasts  one  to  four  weeks.  a  closure  phase

3 0

i e e e  s o f t w a r e

j u l y / a u g u s t  2 0 0 0

when the team
comes together

for a short,
daily meeting,

any slip is
immediately
obvious to
everyone.

usually completes product development. 

the  team  tracks  all  currently  identified
tasks,  capturing  them  in  a  list  called  the
backlog.  the  backlog  drives  team  activity.
before  each  sprint,  the  team  updates  the
backlog  and  reprioritizes  the  taskseach
team  signs  up  for  a  number  of  tasks  and
then  executes  a  sprint.  individual  team
members  agree  to  complete  tasks  they  be-
lieve  are  feasible  during  each  sprint.  the
team  defines  task  granularity  as  appropri-
ate,  commonly  specifying  that  a  task  must
be  completed  in  less  than  a  weeklarger
tasks are more difficult to define and report.
during  a  sprint,  no  changes  are  allowd

from outside the team.

what happens during a sprint?

a sprint produces a visible, usable, deliv-
erable product that implements one or more
user  interactions  with  the  system.  the  key
idea behind each sprint is to deliver valuable
functionality.

each  product  increment  builds  on  previ-
ous increments. the goal is to complete tasks
by the sprints delivery date. a sprint is time-
boxed  development,  meaning  that  the  end
date for a sprint does not change. the team
can reduce delivered functionality during the
sprint, but the delivery date cannot change.
during  the  sprint,  the  team  holds  fre-
quent (usually daily) scrum meetings. these
meetings  address  the  observation  made  by
brooks: how does a project get to be a year
late?  one  day  at  a  time.5 when  the  team
comes  together  for  a  short,  daily  meeting,
any slip is immediately obvious to everyone.
the meetings involve all team members, in-
cluding those who telecommute. the meet-
ings  serve  a  team-building  purpose  and
bring  in  even  remote  contributors,  making
them  feel  a  part  of  the  group  and  making
their work visible to the rest of the team.

how do you plan and estimate?

often,  the  marketing  group  or  the  cus-
tomer  will  set  the  release  date.  with  a  re-
lease date set, the development and market-
ing  groups  must  work  together  to  provide
the  features  with  the  highest  value  for  the
products  first  release.  marketing  should
prioritize the features, while the product de-
velopment group provides estimates for the
effort. marketing and product development
must  agree  on  the  target  set  of  features.  if

planning
proceeds
relatively

quickly because

the initial
assumptions
will surely
change as

sprints deliver
incremental
functionality.

the product development group cannot de-
liver the requested features, the groups must
negotiate a reduced set of features. 

in negotiating features in the release, man-
agement  must  identify  available  developers
for feature development. the number of de-
velopers for each team must meet the scrum
recommendation:  no  more  than  10.  of
course, you can have several teams. to com-
plete negotiations with the marketing depart-
ment, the product development group must
have  the  required  developers  committed  to
the project for the identified time period. 

once  negotiations  between  the  market-
ing  and  product  development  groups  are
complete, the backlog is allocated to sprints
in priority order. the product development
group  also  establishes  the  target  develop-
ment environment and determines the risks
associated with it. while the marketing de-
partment  understands  what  the  customer
needs and the value to the customer, prod-
uct  development  members  understand  the
risk of new technologies, tools, or software
processes.  they  identify  and  address  these
risks  in  the  decision-making  that  leads  to
the feature allocation to sprints. in general,
they address risky items in early sprints to
allow time to recover if technical difficulties
arise.

planning  proceeds  relatively  quickly  be-
cause the initial assumptions will surely change
as sprints deliver incremental functionality.

who leads the team?

the scrum master leads the scrum meet-
ings, identifies the initial backlog to be com-
pleted in the sprint, and empirically measures
progress toward the goal of delivering this in-
cremental  set  of  product  functionality.  the
scrum  master  ensures  that  everyone  makes
progress,  records  the  decisions  made  at  the
meeting  and  tracks  action  items,  and  keeps
the scrum meetings short and focused. 

the  scrum  master  works  constantly  to
reduce product risk through the incremental
delivery of features, rapid response to devel-
opment obstacles, and continual tracking of
the delivery of backlog items.

what happens during a scrum meeting?

each  team  member  must  answer  three

questions:

1. what have you completed, relative to the

backlog, since the last scrum meeting?

2. what obstacles got in your way of com-

pleting this work?

3. what specific things do you plan to ac-
complish,  relative  to  the  backlog,  be-
tween now and the next scrum meeting?

the scrum meeting should last 15 to 30
minutes, which provides enough time to ad-
dress obstacles, but does not allow time to
brainstorm a solution. all discussion other
than responses to the three questions is de-
ferred  to  a  later  meeting  involving  only
those  actually  affected  by  the  discussion.
the goals of the scrum meeting include

i focusing the effort of developers on the

backlog items,

i communicating the priorities of backlog

items to team members,

i keeping  everyone  informed  of  team

progress and obstacles,

i resolving obstacles as quickly as possible,
i tracking progress in delivering the back-

log functionality, and

i addressing and minimizing project risk.

what happens at the end of a sprint?

at the end of a sprint, the team produces
an increment that builds on previous incre-
ments. the team can trim functionality but
must meet the promised delivery date.

after each sprint, all project teams meet
with  all  stakeholders,  including  high-level
management, customers, and customer rep-
resentatives. all new information from the
sprint  just  completed  is  reported.  at  this
meeting,  anything  can  be  changed.  work
can  be  added,  eliminated,  or  reprioritized.
customer  input  shapes  priority-setting  ac-
tivities. items that are important to the cus-
tomer have the highest priority. 

new  plans  and  estimates  are  made  fol-
lowing  the  same  process  discussed  under
how do you plan and estimate? assign-
ments are then made to teams for the next
sprint. as  sprints  finish,  estimates  become
better  as  planners  see  what  each  team  has
produced in previous sprints. with the small
time increments, the planners must be care-
ful  in  their  estimation,  because,  as  brooks
states, extrapolation of times for the hun-
dred-yard dash shows that a man can run a
mile in less than three minutes.5

because each sprint produces a visible, us-

j u l y / a u g u s t   2 0 0 0

i e e e  s o f t w a r e

31

able,  increment,  product  delivery  can  take
place  after  any  sprint.  in  fact,  delivery  of  a
sort does take place and feedback from the
business  and  marketing  side  and  from  cus-
tomers  is  a  reaction  to  the  current  incre-
ments delivery. typically, final delivery takes
place after a wrap-up phase that is run as a
final sprint.

the organization can make one very im-
portant  decision  at  the  end  of  a  sprint:
whether  to  continue  product  development.
given  what  was  delivered  during  the  last
sprint  and  the  current  state  of  the  market,
the stakeholder meeting should address the
question,  should  this  project  continue?
this  is  a  business  decision  and  must  be
made after considering all the technical and
marketing issues.

as  a  result  of  the  interaction  of  small
teams in small, focused development cycles,

i the  product  becomes  a  series  of  man-

ageable chunks,

i progress  is  made,  even  when  require-

ments are not stable,

i everything is visible to everyone,
i team communication improves,
i the team shares successes along the way

and at the end,

i customers see on-time delivery of

increments,

i customers  obtain  frequent  feedback  on

how the product actually works,

i a relationship with the customer devel-
ops, trust builds, and knowledge grows,
and

i a culture is created where everyone ex-

pects the project to succeed.

about the authors

linda rising is the editor of the pattern almanac 2000 (addison-wesley) and a pat-
terns handbook (cambridge univ. press) and was also the feature editor for a special issue of
ieee communications on design patterns in communications software, which appeared in april
1999. she is interested in patterns and processes for software development and has worked in
the telecommunications, avionics, and strategic weapons systems industries. she has a phd
from arizona state university in the area of object-based design metrics and is a member of
the acm and ieee computer society. contact her at risingl@acm.org.

norman s. janoff is a software project engineer at ag communication systems in
phoenix, arizona. he has worked as a software manager on a large telecommunication switch-
ing system and as a software engineer. his current research interests include software processes
and software metrics. he received a bs in electrical engineering from the university of michi-
gan, an ms in electrical engineering from the university of illinois, and an mba from the uni-
versity of chicago. contact him at ag communication systems, 2500 w. utopia rd., phoenix,
az, 85027; janoffn@agcs.com.

32

i e e e  s o f t w a r e

j u l y / a u g u s t  2 0 0 0

m ost  of  scrums  elements  are  not

new. it is basically an incremental,
time-boxed  development  with  an
added twist: the frequent meetings where the
three  questions  are  asked.  barry  boehms
spiral model certainly addresses the element
of risk in software development.7 the essen-
tial ideas behind the spiral model are exactly
the  same  as  those  in  scrumjust  speeded
up! a sprint typically lasts one to four weeks
and  an  entire  project  only  a  few  months.
during  that  short  time,  the  original  cus-
tomer  might  leave  and  a  new  one  arrive
with  new  constraints.  in  addition,  technol-
ogy might change out from under the team.
weve  found  that  scrum  is  appropriate
for projects where we cant define require-
ments  up  front  and  chaotic  conditions  are
anticipated  throughout  the  product  devel-
opment  life  cycle.  at  ag  communication
systems,  we  continue  to  evolve  the  ap-
proach as our development groups gain ex-
perience with it.

acknowledgments

we thank the open-minded, openhearted develop-
ment teams and managers at ag communication sys-
tems for their continued support of innovative ideas,
as well as the reviewers for their helpful comments.

references
1. m. beedle et al., scrum: an extension pattern lan-

guage for hyperproductive software development,
pattern languages of program design 4, n. harrison,
b. foote, and h. rohnert, eds., addison-wesley, read-
ing, mass., 2000, pp. 637651.

2. b. goldfedder and l. rising, a training experience
with patterns, comm. acm, vol. 39, no. 10, oct.
1996, pp. 6064.

3. n.s. janoff, organizational patterns at ag communi-

4.

cation systems, the patterns handbook, l. rising,
ed., cambridge univ. press, new york, 1998, pp.
131138.
j.o. coplien, a generative development-process pat-
tern language, pattern languages of program design,
j.o. coplien and d.c. schmidt, eds., addison-wesley,
new york, 1995, pp. 184237.

5. f.p. brooks, the mythical man-month: essays on soft-

ware engineering, addison-wesley, new york, 1995.

6. l. fried, when bigger is not better: productivity and
team size in software development, software engi-
neering tools, techniques, practice, vol. 2, no. 1, pp.
1525.

7. b.w. boehm, a spiral model of software develop-
ment and enhancement, computer, vol. 21, no. 5,
may 1988, pp. 6172.

