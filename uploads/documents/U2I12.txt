voice of evidence

editor: tore dyba
sintef
tore.dyba@sintef.no

what do we know 
about software 
development in startups?

carmine giardino, michael unterkalmsteiner, nicolo paternoster, 
tony gorschek, and pekka abrahamsson

startups  are  newly  created 
companies  with  little  or  no  history 
of facing high volatility in technolo-
gies  and  markets.  in  the  us  alone, 
476,000  new  businesses  are  estab-
lished  each  month,1  accounting  for 
nearly  20  percent  of  job  creation.2
as  such,  startups  are  an  important 
factor in the economy. however, the 

failure  rate  is  still  unknown  given 
the premature state of research.

we  present  a  detailed  investiga-
tion and collection of all known em-
pirical  software  engineering  sources 
related  to  startups  and  their  engi-
neering practices, as well as an anal-
ysis of how accurate and reliable this 
available evidence is.4 we see this as 

high uncertainty and rapid evolution 
are the two key characteristics 
for startups.

environment of startups is dynamic, 
unpredictable,  and  even  chaotic, 
forcing entrepreneurs to act quickly, 
fail  fast,  and  learn  faster  to  fi nd  a 
market niche and acquire a sustain-
able  income.  sixty  percent  of  start-
ups dont survive the fi rst fi ve years, 
and  75  percent  of  venture  capital 
funded  startups  fail.3  most  of  this 
is  due  to  the  high  risk  of  startups, 
missed  market  windows,  and  other 
business reasons. to what extend en-
gineering practices impact this high 

a fi rst critical step into a largely un-
known areathe world of software 
engineering practices in startups.

what is a startup, anyway?
in  the  past,  the  term  startup  had 
different  meanings.  looking  at  the 
recurrent  themes  (table  1  offers  a 
complete list) adopted by researchers 
and practitioners, a startup is a small 
company exploring new business op-
portunities, working to solve a prob-
lem  where  the  solution  isnt  well 

known and the market is highly vol-
atile. being newly founded does not 
in  itself  make  a  company  a  startup. 
high  uncertainty  and  rapid  evolu-
tion  are  the  two  key  characteristics 
for startups retrieved by the studies, 
which better differentiate them from 
more established companies. 

we  retrieved  and  evaluated  em-
pirical evidence by using the system-
atic  mapping  study  approach  (see 
the sidebar). 

startup software 
development
done  is  better  than  perfect  and 
move fast and break things are slo-
gans you might read when entering a 
startup workspace. what stands be-
hind  those  slogans  is  a  summary  of 
more  than  200  working  practices. 
we reviewed these to point out where 
gaps  exist  and  future  development 
and research are warranted.

process management is agile, 
evolutionary, and opportunistic
process  management  represents  all 
the  engineering  activities  used  to 
manage  product  development 
in 
startups. because the fl exibility to ac-
commodate  frequent  changes  is  es-
sential  in  the  startup  context,  agile 

28 

i e e e   s o f t wa r e    |  p u b l i s h e d   b y   t h e   i e e e   c o m p u t e r   s o c i e t y  

0 7 4 0 - 7 4 5 9 / 1 4 / $ 3 1 . 0 0      2 0 1 4   i e e e

s5voe.indd   28

8/7/14   1:23 pm

1
 
e
l
b
a
t

recurrent themes in software startups.

theme

description

lack of resources

economical, human, and physical resources are extremely limited.

highly reactive

innovation

uncertainty

rapidly evolving

time pressure

startups are able to quickly react to changes in the underlying market, technologies, and product 
(compared to more established companies).

given the highly competitive ecosystem, startups need to focus on and explore highly innovative segments 
of the market.

startups deal with a highly uncertain ecosystem under different perspectives: market, product features, 
competition, people, and finance.

successful startups aim to grow and scale rapidly.

the environment often forces startups to release fast and to work under constant pressure (terms sheets, 
demo days, investors requests).

third-party dependency

due to lack of resources, startups heavily rely on external solutions to build their product: external apis, 
open source software, outsourcing, cots, and so on.

small team

one product

startups start with a small number of individuals.

company activities gravitate around one product/service only.

low-experienced team

a good part of the development team is formed by people with less than five years of experience and often 
recently graduated students.

new company

full organization

highly risky

not self-sustained

the company has been recently created.

startups are usually founder-centric, and everyone in the company has big responsibilities, with no need 
for upper management.

the failure rate of startups is extremely high.

especially in the early stage, startups need external funding to sustain their activities (venture capitalist, 
angel investments, personal funds, and so on).

little working experience

the basis of an organizational culture isnt present initially.

methodologies  have  been  considered 
the  most  viable  processthey  em-
brace  change,  allowing  development 
to  adapt  to  the  business  strategy.5 
fast release with an iterative and in-
cremental approach shortens the lead 
time from idea conception to produc-
tion with fast deployment.

a  variant  to  agile  is  the  lean 
methodology,6  which  advocates  the 
identification of the riskiest parts of 
a  software  business  and  provides  a 
minimum  viable  product  to  system-
atically  test  and  plan  modification 
for the next iteration. in this regard, 

prototyping  is  essential  to  shorten 
the time to market.

to  allow  better  prototyping  ac-
tivities, evolutionary workflows are 
needed  to  implement  soft-coded 
solutions  in  the  first  phases  until 
the  optimal  solution  is  found.  de-
spite  the  number  of  methodolo-
gies  that  embrace  fast  prototyp-
ing  in  development,  none  of  the 
processes  are  strictly  followed  by 
startups.  yet,  the  uncertainty  and 
fast-changing  needs  of  startups 
drive 
to  opportunistically 
tailor  minimal  process  manage-

them 

ment  to  their  short-term  objectives 
and  adapt  to  the  fast-paced  learn-
ing process of their users to address 
market uncertainty.

software development is driven by 
customers who act as designers
startups are under constant pressure 
to  rapidly  demonstrate  that  theyre 
developing  a  solution  that  fixes  a 
real  problem.7  theyre  constantly 
optimizing  the  problem/solution  fit. 
to achieve it, startups must discover 
the  real  needs  of  their  first  custom-
ers,  testing  business  speculations 

 

s5voe.indd   29

s e p t e m b e r / o c t o b e r   2 0 14    |  i e e e   s o f t wa r e 

29

8/7/14   1:23 pm

voice of evidencevoice of evidence

empirical body of evidence

a systematic mapping study is a method to structure the empirical evidence 
in a particular fi eld of interest.1 we identifi ed 43 studies that investigate dif-
ferent aspects of startups and their software development processes. we 
also estimated the strength of evidence in this fi eld by assessing the rigor and 
relevance of the studies (see figure a).2 rigor refers to the precision and thor-
oughness of reporting a studys design, validity threats, and results. relevance 
refers to the realism of the environment in which the study is performed and to 
the potential of transferring results to practitioners.

our rigor and relevance assessment suggests that the empirical evidence 
on the startup phenomenon is still rather premature. a minority10 of the 43 
mapped studiesprovides transferable and reliable results to practitioners 
(sector a). similarly, 10 studies provide low rigor and relevance (sector c). 
more studies (23) exhibit moderate industry relevance, but with low scientifi c 
rigor (sector b). from this observation, we conclude that its challenging to 
conduct research in an environment in which a lack of resources is a dominant 
characteristic. researchers need to identify effi cient means to collaborate with 
and study startups.

references
  1.  k. petersen et al., systematic mapping studies in software engineering, proc. 12th intl conf. 

evaluation and assessment in software eng. (ease), 2007, pp. 110.

  2.  m. ivarsson and t. gorschek, a method for evaluating rigor and industrial relevance of tech-

nology evaluations, empirical software eng., vol. 16, no. 3, 2010, pp. 365395.

4

3

2

1

0

)
s
t
c
e
p
s
a
 
e
c
n
a
v
e
e
r
 
y
r
t
s
u
d
n

l

i
 
f
o
 
t
n
u
o
m
a

(

e
c
n
a
v
e
e
r

l

b

2

3

c

2

4

4

2

2

1

1

1

3

a

1

1

2

2

1

n number of studies with
corresponding rigor and
relevance

0.5

1.0

1.5
rigor

2.0

2.5

3.0

1

7

3

0

(amount, weighed by strength, of reported study rigor aspects)

figure a. rigor and relevance of primary studies.

the  effort  for  each  story.  however, 
polishing  requirements  that  address 
an unsolicited need a waste of effort. 
requirements elicitation methods are 
moving  toward  testing  the  problem 
and understanding if the solution fi ts 
real needs before the product goes to 
market  (the  so-called  customer  de-
velopment process).7

in  the  startup  context,  custom-
ers often steer requirements, and de-
velopers  must  be  ready  to  embrace 
change  from  day  one.  the  use  of 
architecture  and  design  patterns  to 
make features modular and indepen-
dent is crucial when functionality is 
continuously  updated  or  removed. 
therefore,  employing  architectural 
practices  and  frameworks  that  en-
able  easy  extension  of  the  design 
can  dramatically  benefi t  the  align-
ment between the product and mar-
ket uncertainty.9 this requires some 
upfront  effort  but  can  prevent  the 
growth of product complexity.

scientifi c  evidence  also  points 
to  the  advantages  of  constant  code 
refactoring.  reimplementing 
the 
whole  system  might  be  costly  and 
risky if it must be immediately scal-
able  to  a  growing  number  of  users. 
therefore,  some  quality  assurance 
is  needed  for  the  functionality  that 
brings  the  most  value  to  customers. 
the use of ongoing customer accep-
tance  through  focus  groups  made 
up  of  early  adopters  can  provide  a 
time-effi cient way to discover major 
bugs.  but  solutions  are  still  scarce 
for  easily  accessible  automated  test-
ing frameworks and the more practi-
cal user interface-testing approaches.

only  by  defi ning  a  minimal  set  of 
functional requirements.8

several  authors  acknowledge  the 
importance  of  involving  the  cus-
tomer/user in the process of eliciting 
and prioritizing requirements accord-

ing to their primary needs. however, 
the  market-driven  nature  of  those 
requirements  also  demands  alterna-
tives.  for  example,  startups  can  use 
scenarios to identify requirements in 
the form of user stories and estimate 

the team is the 
catalyst of development
time pressure and lack of resources 
often lead startups to adopt a loose 
organizational structure without tra-
ditional  management  hierarchies.10

30 

i e e e   s o f t wa r e    |  w w w.c o m p u t e r .o r g / s o f t wa r e    |  @ i e e e s o f t wa r e

s5voe.indd   30

8/7/14   1:23 pm

voice of evidence

empowerment  of  team  members 
represents  the  main  viable  strat-
egy  for  enhancing  performance  and 
success.11 the team must be able to 
absorb  and  learn  from  trial  and  er-
ror quickly enough to adapt to new 
emergent  practices.  working  on  in-
novative  products  requires  creativ-
ityan ability to adapt to new roles 
and  face  new  challenges  every  day, 
working overtime if necessary.

indeed, in building a startup com-
pany,  the  team  needs  expertise  to 
counterbalance its lack of resources. 
in addition, having previous experi-
ence in similar business domains and 
exhibiting  entrepreneurial  charac-
teristics  (courage,  enthusiasm,  com-
mitment,  leadership)  are  important 
parts of a startup employees skillset. 
nevertheless, the absence of struc-
ture  might  hinder  important  activi-
ties,  such  as  sharing  knowledge  and 
team  coordination,  especially  when 
the company grows. in this case, col-
location  is  essential  to  facilitate  in-
formal communication and close in-
teractions between team members.

tools can accommodate product 
and management changes
startups  can  take  advantage  of  the 
newest technologies and development 
tools without having to worry about 
legacy  or  previous  working  experi-
ences.12 but the selection of a technol-
ogy  requires  some  domain-  or  prod-
uct-specifi c  requirements,  which  are 
typically unknown in the early stages.
in  general,  startup  employees 
prefer  using  those  technologies  that 
can quickly accommodate change in 
the  product  and  its  management.13
examples 
include  general-purpose 
infrastructures,  such  as  confi gura-
tion  management,  problem  report-
ing, tracking, and planning systems, 
and scheduling and notifi cation sys-
tems. easy-to-implement tools, such 

as  whiteboards  and  technologies 
that can handle fast-paced changing 
information,  will  lower  a  startups 
training  and  maintenance  costs.  to 
mitigate the lack of resources, start-
ups  often  appear  to  take  advantage 
of  open  source  solutions  when  pos-
sible, which also give them access to 

late  customer  feedback  increase  the 
number of perspectives and solutions 
available to decision makers. devel-
opers  need  the  freedom  to  choose 
activities  quickly,  stop  immediately 
when  the  results  are  wrong,  fi x  the 
approach,  and  learn  from  previous 
failures. in line with the lean startup 

nevertheless, the absence 
of structure might hinder 
important activities.

a large pool of evaluators and evolv-
ing contributions.

s tartup  companies  seek  to 

generate revenue and obtain 
funding  to  continue  the  de-
velopment,  which  means  that  soft-
ware  quality  isnt  their  most  criti-
cal concern. to quickly validate the 
product,  they  tend  to  use  agile  and 
lean methods in an ad hoc manner.14
evidence  suggests  that  engineer-
ing  activities  must  be  tailored  to 
the  startup  context  to  allow  fl ex-
ibility  and  reactiveness  in  develop-
ment  workfl ows.  decision  makers 
in  startups  confront  continuous  un-
predictability;  the  relationship  be-
tween  cause  and  effect  can  only  be 
perceived  in  retrospect.15  applying 
rigorous  methodologies  to  control 
development  activities  isnt  effective 
because  no  matter  how  much  time 
is spent on analysis, it isnt possible 
to identify all the risks or accurately 
predict  what  practices  are  required 
to develop a product.

on  the  other  hand,  fl exible  and 
reactive methods designed to stimu-

movement,  we  would  expect  meth-
odologies  and  techniques  tailored 
from common agile practices to spe-
cifi c  startups  cultures  and  needs; 
failures should be completely accept-
able  or  even  preferred  in  favor  of  a 
faster learning process.

reported common practices, which 
ride the wave of rapidly evolving tech-
nologies and markets, are as follows:

  use of well-known frameworks 
to quickly change the product 
according to market needs;

  use of evolutionary prototyping 
and experimentations via exist-
ing components;

  ongoing customer acceptance 
through early adopters focus 
groups;

  continuous value delivery, focus-
ing on core functionalities that 
engage paying customers;

  empowerment of teams to infl u-

ence fi nal outcomes;

  use of metrics to quickly learn 
from consumers feedback and 
demand; and

  use of easy-to-implement tools 

to facilitate product development 

s e p t e m b e r / o c t o b e r   2 0 14    |  i e e e   s o f t wa r e

31

s5voe.indd   31

8/7/14   1:23 pm

voice of evidence

process formation in software start-ups, 
j. enterprise information management, 
vol. 21, no. 6, 2008, pp. 633648.

ups fail and what to do about it, proc. 
intl eng. management conf. (iemc), 
2002, pp. 338343.

  6.  e. ries, the lean startup: how todays 

 14.  s.w. ambler, lessons in agility from 

internet-based development, ieee soft-
ware, vol. 19, no. 2, 2002, 6673.

 15.  c.f. kurtz and d.j. snowden, the new 
dynamics of strategy: sense-making in 
a complex and complicated world, 
ibm systems j., vol. 42, no. 3, 2003, pp. 
462483.

carmine giardino is a phd student in 
computer science at the free university of 
bolzano. his research interests include software 
development in startup companies, focusing 
on the alignment between business strategies 
and development activities. contact him at 
cgiardino@unibz.it.

michael unterkalmsteiner is a phd 
student in software engineering at the blekinge 
institute of technology (bth). his research 
interests include coordination of requirements 
engineering and testing, information retrieval to 
support decision making, and software reposi-
tory mining. unterkalmsteiner received an msc in 
software engineering from bth. contact him at 
mun@bth.se.

nicolo paternoster is a startupper at 
www.woodwallets.io. his research interests 
include bitcoins service development and maker-
space development. paternoster received an msc 
in software engineering from blekinge institute 
of technology and free university of bozen-
bolzano. contact him at hi@adva.io.

tony gorschek is a professor at the ble-
kinge institute of technology (bth) and chalm-
ers. his research interests include requirements 
engineering, technology and product manage-
ment, process assessment and improvement, 
and practical innovation. gorschek received a 
phd in software engineering from bth. contact 
him at tgo@bth.se.

pekka abrahamsson is a full professor of 
computer science at free university of bozen-
bolzano. his research interests include empirical 
software engineering, agile development, 
startups, and cloud computing. abrahamsson 
received a phd in software engineering from uni-
versity of oulu in finland. contact him at pekka.
abrahamsson@unibz.it.

selected cs articles and columns 
are also available for free at  
http://computingnow.computer.org.

and handle fast-paced, changing 
information.

todays  startups  are  at  the  fore-
front  of  applying  new  technologies 
in practice. the growing startup phe-
nomenon  opens  uncharted  opportu-
nities as well as challenges in research. 
startuppers need more transferable 
and reliable results concerning the di-
versity  of  context  and  viewpoints  in 
the adoption of practices dealing with 
high uncertainty.

references
  1.  r.w. fairlie, kauffman index of entre-
preneurial activity, kauffman founda-
tion, 2014.

  2.  r.w. fairlie, state of entrepreneurship 
address, kauffman foundation, 2014.

  3.  c. nobel, why companies fail, and 

how their founders can bounce back, 
harvard business school, 2011.

  4.  n. paternoster et al., software develop-
ment in startup companies: a systematic 
mapping study, information and soft-
ware technology, 2014; doi: 10.1016/j.
infsof.2014.04.014

  5.  g. coleman and r. oconnor, an 

investigation into software development 

entrepreneurs use continuous innovation 
to create radically successful businesses, 
crown business, 2011.

  7.  s. blank, why the lean start-up 

changes everything, harvard business 
rev., vol. 91, no. 5, 2013, p. 64.

  8.  s.-c. li, the role of value proposition 

and value co-production in new internet 
startups: how new venture e-businesses 
achieve competitive advantage, portland 
intl center for management of engineer-
ing and technology (picmet), 2007, pp. 
1126 1132.

  9.  s. yogendra, aligning business and 

technology strategies: a comparison of 
established and start-up business con-
texts, proc. intl eng. management conf. 
(iemc), 2002, pp. 27.

 10.  y.-w. yu et al., entrepreneurial success 

for high-tech start-ups: case study of 
taiwan high-tech companies, proc. 6th 
intl conf. innovative mobile and internet 
services in ubiquitous computing, 2012, 
pp. 933937.

 11.  e. carmel, time-to-completion in 

software package startups, proc. 27th 
hawaii intl conf. system sciences, 1994, 
pp. 498507.

 12.  s.m. sutton, the role of process in 

software start-ups, ieee software, vol. 
17, no. 4, 2000, pp. 3339.

 13.  m. crowne, why software product start-

call   articles
  for

ieee software seeks practical, readable 
articles that will appeal to experts and nonexperts 
alike. the magazine aims to deliver reliable 
information to software developers and managers
to help them stay on top of rapid technology 
change. submissions must be original and no 
more than 4,700 words, including 200 words 
for each table and  gure.

author guidelines: 
www.computer.org/software/author.htm
further details: software@computer.org
www.computer.org/software

32 

i e e e   s o f t wa r e    |  w w w.c o m p u t e r .o r g / s o f t wa r e    |  @ i e e e s o f t wa r e

s5voe.indd   32

8/7/14   1:23 pm

