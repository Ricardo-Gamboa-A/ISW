requirements

e d i t o r :   n e i l   m a i d e n    c i t y   u n i v e r s i t y ,   l o n d o n    n . a . m . m a i d e n @ c i t y . a c . u k

10 small steps to 
better requirements

ian alexander

t he  journey  of  a  thousand  miles  begins

with a single step. this chinese proverb
helps people focus on the present, rather
than the unmanageable future.

project  teams  can  take  several  small,
easy  steps  to  improve  requirements  to
the point where theyre good enough. but every
project  is  different.  your  team  might  need  to
take  steps  that  wouldnt be
right in other situations. 

the  basic  steps  listed  here,
roughly in order, demand noth-
ing more than a whiteboard or
a pen and paper. requirements
management tools and special-
ized models can help later on. 

step 1: mission and
scope

if  you  dont  know  where  youre  going,
youre  not  likely  to  end  up  there,  said  forrest
gump.  is  your  mission  clear?  write  a  short
statement  of  what  you  want  your  project  to
achieve. out of that will grow an understanding
of the projects scope. the scope will develop as
you  more  clearly  understand  exactly  what
achieving the mission entails.

a traditional context diagram is a good tool
for describing scope in a simple outline. unlike a
use-case  summary  diagram,  it  indicates  inter-
faces and the information or materials that must
come  in  or  out  of  them,  rather  than  just  roles
(that  is,  uml  actors).  this  becomes  especially
important  when  specifying  physical  systems

where  software  is  just  a  (large)  component.
later, you can analyze each interface in detail.

step 2: stakeholders

requirements come from people, not books.
you can look in old system documents and read
change requests, but you must still validate any
candidate requirements you discover with peo-
ple.  missing  a  group  of  stakeholders  means
your system could lack a whole chunk of func-
tionality or other requirements. 

stakeholders  are  far  more  diverse  than  can
be understood by listing their operational roles.
every  system  has  a  varied  set  of  beneficiaries.
the  role  of  regulator  is  often  critical.  stake-
holders negative opinions and actions can halt
the project if not taken into account. 

at the very least, you should list everyone
with  an  interest  in  the  system  and  consider
what  degree  of  involvement  each  person  or
group should have. a template might help you
identify  some  stakeholders  youd  otherwise
overlook.

step 3: goals

once you know who your stakeholders are,
you can identify their goals. this can begin with
a list or, perhaps better, a hierarchy (you could
use an outliner, such as microsoft words outline
view, or a mind-mapping tool).

goals  can  be  optimistic  and  even  unrealiz-
ablefor example, a universally available prod-
uct, a perfectly safe railway, or a ceaseless power
source. in this way, theyre unlike requirements,

0 7 4 0 - 7 4 5 9 / 0 6 / $ 2 0 . 0 0    2 0 0 6  i e e e

march/april 2006 i e e e  s o f t w a r e

1 9

requirements

commercial goal

control whole-life cost



commercial threat

supplier locks
in a monopoly

commercial threat

supplier plays

contract changes game



+

design goal

minimize complexity

commercial threat

+



restrictive service contract

commercial goal

functional

goal



model the services needed

encourage competition

figure 1. analyzing goal and threat interactions quickly transforms vague 
targets into concrete functions. here, its applied to explore the core goals of 
a large public-service company that must upgrade its existing client-server 
system. the gold bubbles are desired goals; the red bubbles are threats.

which  must  be  definitely  realizable  and
verifiable.

large  initial  goals  are  often  vague
qualities that stakeholders (for example,
marketing  or  product  management)
want  product  users  to  experience.  you
can  usually  break  such  aspirations
down  into  more  concrete,  realizable
goals.  for  example,  the  goal  the  car
should 
luxurious  might  be
achieved  with  leather  upholstery,  air
conditioning,  soundproofing,  walnut
veneer, or hi-fi music. this second tier of
goals  suggests  possible  features  and
even software functions to help to meet
the initial goal.

feel 

step 4: goal conflicts

goals often conflict, but requirements
must not. its essential to discover and re-
solve any conflicts early on.

some conflicts will be obvious from a
plain list of goals; others are easier to see
on a goal model (see figure 1). draw each
goal as a bubble; label it with its type (for
example,  commercial  or  functional).
draw an arrow marked with a plus sign
(+)  to  show  that  one  goal  supports  an-
other; draw an arrow marked with a mi-
nus sign () to show a negative effect.

step 5: scenarios

scenarios use the element of time to
translate  goals  into  connected  stories.
isolated shall statements attempt to
communicate needs as if they could be
implemented  independently,  whereas
connecting  sequences  of  needs  makes
clear what dependencies exist.

at the very least, you should describe
each  operational  situation  as  a  brief
story  or  numbered  list  of  steps.  head
each scenario with the name of the func-
tional  goal  it  implements.  write  each
step  as  a  short  statement  in  the  form
<role> <performs an action>.

when  this  is  no  longer  sufficient,
switch to writing use cases at a level of
detail that suits your project. for exam-
ple,  cockburn-style  use  cases  include
pre-  and  postconditions,  making  the
transition to code far more controllable.

step 6: requirements

scenarios dont cover everything. you
will need techniques for interfaces, con-
straints (such as time and cost), and qual-
ities (such as dependability and security).
traditional  the  system  shall  state-
ments are often convenient, not least be-
cause  suppliers  and  standards  expect

2 0

i e e e  s o f t w a r e www.computer.org/software

them.  of  course,  you  might  think  that
the requirements consist of all the things
listed  here  and  more.  however,  not
everyone shares that understanding. 

use cases do more than anything else
to bridge the gap between the now we
do this world of scenarios and the you
shall  do  that  world  of  traditional  re-
quirements.  neil  maiden  has  champi-
oned  the  systematic  use  of  use  cases  to
discover missing requirements (system-
atic  scenario  walkthroughs  with  art-
scene,  scenarios,  stories,  use  cases:
through the systems development life-
cycle, john wiley & sons, 2004).

step 7: justifications

if you note only what your system has
to do and not why it has to do it, devel-
opers must guess whats really important.
when resources start to run out or when
planners  see  that  demand  will  exceed
available  effort,  project  managers  must
cut  or  postpone something.  a  justifica-
tion, like a priority, helps protect vital re-
quirements  from  being  dropped.  it  also
helps  developers  understand  how  each
requirement fits and why its needed. 

you  can  construct  justifications  in
many  waysmost  simply  with  a  few
words  explaining  a  requirements  pur-
pose attached to individual requirements
as  attributes  or  listed  separately  and
linked  to  requirements.  you  can  con-
struct more elaborate justifications as ar-
gumentation models, goals, risk models,
or cost-benefit models. 

step 8: assumptions

a  system  specification  is  a  combina-
tion of things that you want to become
true under system control (requirements)
and things that you need to be true but
cant control (assumptions).

assumptions can include beliefs about
existing systems, interfaces, competition,
the market, the law, safety hazard mit-
igations, and so on. the most danger-
ous assumptions are tacitthe ones you
didnt know you were making.

like  justifications,  you  can  model 
assumptions as any kind of argumenta-
tion. the simplest approach is to state
each assumption as a piece of text.

when  planning  a  project,  it  can  be
valuable to examine the assumptions the

requirements

further reading

 mission and scope: dean leffingwell and don widrig, managing software requirements, addison-wesley, 2000.

suzanne robertson and james robertson, project blastoff, mastering the requirements process, addison-wesley, 1999.
 stakeholders: ian alexander, a taxonomy of stakeholders, intl j. tech. and human interaction, vol. 1, no. 1, 2005, pp.

2359. 
ian alexander and suzanne robertson, stakeholders without tears, ieee software, vol. 21, no. 1, 2004, pp. 2327.
 goals: alistair sutcliffe, chapter 3: re tasks and processes, user-centred requirements engineering, springer, 2002.
 goal conflicts: ian alexander, misuse cases: use cases with hostile intent, ieee software, vol. 20, no. 1, 2003, pp.

5866.

 scenarios: alistair cockburn, writing effective use cases, addison-wesley, 2001.
 requirements: ian alexander and richard stevens, writing better requirements, addison-wesley, 2002.

ian alexander and neil maiden, what scenarios (still) arent good for, scenarios, stories, use cases, john wiley &
sons, 2002.

 justifications: paul a. kirschner, simon j. buckingham shum, and chad s. carr, visualizing argumentation, springer,

2003.

 assumptions: james a. dewar, assumption-based planning, cambridge university press, 2002.
 agreed priorities: alan m. davis, the art of requirements triage, computer, vol. 36, no. 3, 2003, pp. 4249.
 acceptance criteria: suzanne robertson and james robertson, fit criteria, mastering the requirements process, addi-

son-wesley, 1999.

project  depends  on  and  to  consider  a
course of action should any assumption
fail and threaten the projects survival.

step 9: agreed priorities

some  requirements  are  so  obviously
vital that you should just do them. some
are  so  obviously  unnecessary  that  you
should just drop them at once. you must
prioritize the rest more closely. dividing
requirements  into  these  three  categories
is a short, brutal process called triage.

next, rank the remaining requirements
into categories such as vital, desirable, nice
to have, and luxury. you can do this by
voting,  reaching  consensus  among  a
panel, or allocating notional money.

step 10: acceptance criteria 

requirements dont end when youve
completed  the  specifications.  rather,
their work is just beginningthey guide
development  all  the  way  to  acceptance
and service. 

you should identify how youll know
when the system meets each requirement.
this  isnt  a  full  description  of  each  test
case but criteria for deciding whether the
system passes or fails against the require-
ment.  later,  plan  the  test  campaign  on
the  basis  of  the  scenarios  (among  other
factors) and trace the test cases to the re-
quirements to demonstrate coverage. 

i cant guarantee that after taking these

10  steps,  your  requirements  will  be
perfect.  but  if  you  follow  them  care-

fully, your requirements will improve.

ian alexander is an independent consultant specializing in
requirements engineering for systems in the automotive, aero-
space, transport, telecommunications, and public-service sectors.
contact him at iany@easynet.co.uk.

march/april 2006 i e e e  s o f t w a r e

2 1

