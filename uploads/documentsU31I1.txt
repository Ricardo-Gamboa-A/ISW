european journal of operational research 151 (2003) 247252

www.elsevier.com/locate/dsw

preface

guidelines for the use of meta-heuristics

in combinatorial optimization

alain hertz a,*, marino widmer b

a eecole polytechnique de montreeal  gerad, 3000, chemin de la c^oote-sainte-catherine, montreeal (qc), canada h3t 2a7

b universitee de fribourg  diuf faucigny 2, ch-1700 fribourg, switzerland

abstract

the 18th euro summer/winter institute (eswi xviii) took place during the spring 2000 in switzerland. the
topic of eswi xviii, meta-heuristics in combinatorial optimization, was selected due to its great current scientic
interest: indeed, in recent years, several meta-heuristics have proved to be highly ecient for the solution of dicult
combinatorial optimization problems. the institute was focused more particularly on the development and the use of
local search and population search algorithms. applications of these meta-heuristics on academic or real life problems
were also discussed.

this special issue of ejor contains papers written by the participants to eswi xviii. these papers have beneted
from fruitful discussions among the participants, the organizers and the invited speakers. we have tried to summarize
here below some guidelines that should help in the design of successful adaptations of meta-heuristics to dicult
combinatorial optimization problems.
o 2003 elsevier b.v. all rights reserved.

keywords: meta-heuristics; local search methods; population search methods

1. introduction

combinatorial optimization plays an important
role in decision-making since optimal decisions
often depend on a non-trivial combination of
various factors. most combinatorial optimization
problems are np-hard, and sharp bounds on the
optimal value are typically hard to derive. this
means that partial enumeration based exact algo-
rithms have a slow convergence rate, and they can

* corresponding author.
e-mail addresses: alain.hertz@gerad.ca (a. hertz), ma-

rino.widmer@unifr.ch (m. widmer).

solve only small
instances to optimality. but
real-life combinatorial optimization problems are
typically of big size, and since exact approaches
are inadequate, heuristics are commonly used in
practice.

there has been a steady evolution over the past
forty years in the development of heuristics, which
produce solutions of reasonably good quality in a
reasonable amount of time. the rst proposed
heuristics tried to systemize decision-making pro-
cesses done by hand. with the help of computers
which can test a huge amount of combinations in
a short amount of time, solutions could easily
be generated which turned to be of much better
quality when compared to what an expert in the

0377-2217/$ - see front matter o 2003 elsevier b.v. all rights reserved.
doi:10.016/s0377-2217(02)00823-8

248

a. hertz, m. widmer / european journal of operational research 151 (2003) 247252

eld could produce by hand. in these early heu-
ristics, much of the emphasis was put on quickly
obtaining a feasible solution and possibly applying
to it a post-optimization procedure.

over the last 15 years much of the research ef-
fort has concentrated on the development of meta-
heuristics, using mainly two principles: local search
and population search. in local search methods, an
intensive exploration of the solution space is per-
formed by moving at each step from the current
solution to another promising solution in its
neighbourhood. simulated annealing [7],
tabu
search [3] and variable neighbourhood search [8]
are the most famous local search methods. popu-
lation search consists of maintaining a pool of
good solutions and combining them in order to
produce hopefully better solutions. classical ex-
amples are genetic algorithms [5] and adaptive
memory procedures [9].

meta-heuristics are general combinatorial op-
timization techniques, which are not dedicated to
the solution of a particular problem, but are rather
designed with the aim of being exible enough to
handle as many dierent combinatorial problems
as possible. these general techniques have rapidly
demonstrated their usefulness and eciency in
solving hard problems. success stories are reported
in many papers. while meta-heuristics can handle
in theory any combinatorial optimization prob-
lem, it is often the case that an important eort
must be put on nding the right way to adapt the
general ingredients of these methods to the par-
ticular considered problem.

we think that in order to be successful in the
adaptation of a meta-heuristic to a combinatorial
optimization problem,
it is necessary to follow
some basic principles. we give in the next sections
some guidelines which may help in producing such
successful adaptations of local search and popu-
lation search methods for the solution of dicult
combinatorial optimization problems.

2. guidelines for adaptations of local search meth-
ods

let s be a set of solutions to a particular
problem, and let f be a cost function that mea-

sures the quality of each solution in s. the
neighbourhood ns of a solution s in s is dened
as the set of solutions which can be obtained from
s by performing simple modications. roughly
speaking, a local search algorithm starts o with
an initial solution in s and then continually tries to
nd better solutions by searching neighbourhoods.
a local search process can be viewed as a walk in a
directed graph g 14 s; a where the vertex set s is
the set of solutions and there is an arc s; s0 in a if
and only if s0 is in ns. by considering the cost
function as an altitude, one gets a topology on
g 14 s; a.

the eciency of a local search method depends
mostly on the modeling. a ne tuning of param-
eters will never balance a bad denition of the
solution set, of the neighbourhood, or of the cost
function. we give in this section some general
guidelines
local
search methods.

successful adaptations of

for

it should be easy to generate solutions in s

(a)

it is not rare that nding a feasible solution to a
combinatorial optimization problem is an np-
hard problem. in such a case, it would be a very
bad idea to dene s as the set of feasible solutions
to the considered problem since getting an initial
solution would be a complex task, and moving
from a solution to a neighbour one would not
be easier. for such problems, the search space s
should be dened by relaxing some constraints of
the original problem, and by adding a component
in the cost function that penalizes violations of
constraints. as an example to this rst principle,
consider
the course-timetabling problem. the
main constraint in this kind of problem requires
that courses given by the same teacher, or having
students in common do not overlap. it is typically
very dicult to generate timetables that do not
contain any overlapping situation. by relaxing
these constraints, it becomes much easier to pro-
duce timetables and neighbour solutions can easily
be obtained by moving a course to another period,
even if such a move induces many new overlapping
situations [4].

a. hertz, m. widmer / european journal of operational research 151 (2003) 247252

249

for each solution s in s, the graph gs; a
should contain a path linking s to an optimal so-
lution s

(b)

if the search process visits a solution that does not
satisfy this condition, then an optimal solution will
never be reached. as an illustration, consider the
vehicle routing problem in which a xed number m
of vehicles with limited capacity are required to
visit customers in order to fulll known customer
requirements. assume that a solution is dened as
a set of m routes which satisfy all customer re-
quirements as well as the capacity constraints, and
suppose that a neighbour solution is obtained by
either moving a customer from one route to an-
other, or by permuting two clients from dierent
routes. such a choice for s violates condition (a)
since nding a solution in s is equivalent to solving
a bin packing problem. moreover, this adaptation
can also violate condition (b). indeed, assume
there are three vehicles which can each transport 4
units of some product, and assume there are four
customers with a demand of 2 units, and four
customers with a demand of 1 unit. if the rst
vehicle visits the four customers with a demand of
1 unit, while the two other vehicles both visit two
customers with a demand of 2 units, then no move
can be performed to modify the rst route without
violating the capacity constraints. however, the
optimal solution might be one in which the rst
two vehicles both visit two customers with a de-
mand of 1 unit and one customer with a demand
of 2 units, while the third vehicle visits two cus-
tomers with a demand of 2 units. conditions (a)
and (b) can easily be satised by relaxing the ca-
pacity constraints [2].

the solutions in ns should be in some sense
close to s

(c)

one could theoretically dene ns as the set
containing all solutions s0 614 s in s. such a neigh-
bourhood induces a complete graph gs; a in
which condition (b) is trivially satised, and it is
possible to move from any initial solution to any
optimal one in one step. however, ns is so big
that nding such an optimal move is a task which

is as dicult as the original problem. it is impor-
tant to dene neighbourhoods ns in which it is
possible to determine the best solution within a
reasonably small amount of time. this goal can be
achieved by dening ns as the set of solutions
obtained by performing a simple modication on
s. the neighbourhood ns of s then contains so-
lutions which are in some sense close to s, and it is
often possible to compute the value of a neighbour
s0 of s by determining the cost dierence between s
and s0, instead of re-computing the value of s0 from
scratch. for example, consider again the vehicle
routing problem, and assume that a neighbour
solution s0 of s is obtained by moving a customer c
from a route r1 to a route r2. the cost dierence
between s and s0 can easily be obtained by com-
puting the saving induced by the removal of c
from r1, and by computing the cost induced by the
insertion of c into r2. there is an additional ad-
vantage of dening neighbours s0 2 ns by simple
modications on s: if a neighbour s0 has a better
cost than s, this may indicate that the arc s; s0
belongs to a short path in gs; a from s to an
optimal solution, and it becomes then possible to
guide the search towards an optimal solution.

the topology induced by the cost function on
gs; a should not be too at

(d)

as explained above, the cost function can be
considered as an altitude, and it therefore induces
a topology on g 14 s; a with mountains, valleys
and plateaus. it is dicult for a local search to
escape from large plateaus since any solution that
is not in the boarder of such a plateau has the same
cost value as its neighbours, and it is therefore
impossible to guide the search towards an optimal
solution. a common way to avoid this kind of
topology on gs; a is to add a component to the
cost function which discriminates between solu-
tions having the same value according to the
original cost function. as an example, consider the
job shop scheduling problem where operations
have to be ordered on machines, such that the
maximal completion time of all operations, called
makespan, is minimized. for a solution s, let cks
denote the time at which all operations are

250

a. hertz, m. widmer / european journal of operational research 151 (2003) 247252

completed on machine k. then the cost fs of
solution s (i.e.,
its makespan) is equal to max
fc1s; c2s; . . . ; cmsg. if two solutions have the
same makespan, then the second largest value in
fc1s; c2s; . . . ; cmsg can help discriminating
between them. another possibility is to minimize
c1s2  c2s2    cms2 in order to penalize
solutions having too many machines whose com-
pletion time is close to the makespan [6].

3. guidelines for adaptations of population search
methods

population search methods are iterative solu-
tion techniques that handle a population of indi-
viduals and make them evolve according to some
rules that have to be clearly specied. at each it-
eration, periods of self-adaptation alternate with
periods of co-operation. self-adaptation means
that individuals evolve independently while co-
operation implies an exchange of
information
among the individuals. many dierent algorithms
can be described within this framework. for ex-
ample, the selection and crossover operators of
genetic algorithms can be seen as co-operation
procedures while the mutation operator is part of
the self-adaptation process.

as for local search methods, the eciency of a
population search depends mostly on the model-
ing. we give in this section some general guidelines
for successful adaptations of population search
methods.

pertinent information should be transmitted
during the co-operation phase

(e)

in the co-operation phase, groups of individuals
exchange pieces of information and new ospring
solutions are created that should combine the best
features of the parent solutions. this means that
the information that is transmitted during the co-
operation phase should be pertinent. consider for
example the k-colouring problem where a colour in
f1; . . . ; kg must be assigned to each vertex of a
graph g so that there are as few edges as possible
in g having both endpoints with the same colour,

such edges being called conicting edges. an o-
spring solution s00 can be created from two parent
solutions s and s0 by colouring some vertices
(chosen at random) as in s, and the others as in s0.
however, such a combination operator typically
produces results of poor quality. indeed, all col-
ours are equivalent up to a permutation, which
means that the colour of a vertex is not a pertinent
information. a more useful information is the fact
that pairs or subsets of vertices have the same
colour. a solution to the k-coloring problem is in
fact a partition of the vertex set into k subsets,
called colour classes, and the aim is to determine a
partition so that as few edges have both endpoints
in the same colour class. nowadays, the best
population search algorithms for the k-coloring
problem create ospring solutions by copying
colour classes in parent solutions [1].

the combination of two equivalent parent solu-
tions should not produce an ospring that is dif-
ferent from the parents

(f)

the combination of

since an ospring solution receives information
from parent solutions, it is reasonable to expect
that
two parent solutions
containing equivalent information produces an
ospring which is also equivalent to its parents. to
illustrate a situation where condition (f) is not
satised, consider again the k-coloring problem,
and let g be a graph with four vertices v1, v2, v3, v4
and three edges v1v2, v2v3, and v3v4. let s be the 2-
coloring of g in which v1 and v3 have colour 1 and
v2 and v4 have colour 2, and let s0 be the 2-coloring
of g obtained from s by permuting colours 1 and
2. solutions s and s0 can be considered as equiva-
lent since they correspond to the same colouring,
up to a permutation of the two colours. if one now
copies the colours of v1 and v2 in s and those of v3
and v4 in s0, one gets a solution s00 in which vertices
v1 and v4 have colour 1 and vertices v2 and v3 have
colour 2. solution s00 is totally dierent from the
two equivalent parent solutions s and s0 since both
s and s0 are optimal solutions (i.e., they have no
conicting edge), while v2v3 is a conicting edge in
s00. this example shows once again that it is a bad
idea to create an ospring solution s00 from two

a. hertz, m. widmer / european journal of operational research 151 (2003) 247252

251

parent solutions s and s0 by colouring some verti-
ces (chosen at random) as in s, and the others as
in s0.

consider now the problem of nding the
smallest integer k for which there exists a k-col-
oring without conicting edge. one can dene a
solution as an ordering of the vertices: each or-
dering p can be transformed into a colouring by
means of a procedure that sequentially colours the
vertices according to the ordering dened by p,
always giving the smallest possible colour (i.e., the
smallest positive integer which is not yet used in
the neighbourhood of the considered vertex). for
example, both orderings s 14 v1 < v2 < v3 < v4 and
s0 14 v3 < v4 < v1 < v2 of the above graph g pro-
duce a 2-coloring in which v1 and v3 have colour 1
and v2 and v4 have colour 2. these two orderings
can therefore be considered as equivalent. an o-
spring can then be created by placing some vertices
in the same position as in one of the parent solu-
tions, and by placing the other vertices according
to the ordering in the second parent solution. for
example, assume that an ospring is created from s
and s0 by copying the positions of v1 and v3 in s.
the ospring is then s00 14 v1 < v4 < v3 < v2, which
corresponds to a 3-coloring where vertices v1 and
v4 having colour 1, vertex v3 has colour 2, and
vertex v2 having colour 3. hence, a 3-coloring is
obtained by combining two equivalent 2-colorings.
such a situation should denitely be avoided.

diversity should be preserved in the population

(g)

one of the major diculties observed when using
population search algorithms is the premature
convergence of the process, all solutions in the
population having a natural tendency to become
equal to the best solution in it. if this occurs, then
the population search behaves more or less like
a local search since there is nothing to gain in
combining equivalent solutions. in order to pre-
vent such a phenomenon, it is important to im-
plement operators that preserve diversity in the
population. the mutation operator in genetic
algorithms is an example of such a tool, but it
usually generates random outputs, which is not

necessarily the best thing to do. a technique that
helps avoiding premature convergence is to forbid
the introduction of a solution in the population if
too many osimilaro solutions already exist in it. but
this requires the development of measures of sim-
ilarity that properly detect when there is a danger
of premature convergence.

4. conclusion

it is not possible to provide a general scheme
for the adaptation of a local search or a popu-
lation search to a combinatorial optimization
problem. we tried in these few pages to give some
guidelines that should help in the design of suc-
cessful adaptations.

this special

issue of ejor contains papers
written by the participants to eswi xviii. each
participant had one hour and a half to describe a
preliminary paper and his research on the use of
meta-heuristics in combinatorial optimisation. the
nal version of these papers have beneted from
fruitful discussions which took place between the
participants,
invited
speakers (martin grootschel and manuel laguna),
as well as from the above guidelines.

the organizers, and the

as a conclusion, we want to mention that the
fantastic work atmosphere during eswi xviii
has given the energy to the participants to create a
new euro working group called eu/me (to be
pronounced you and me): european chapter on
meta-heuristics.

references

[1] p. galinier, j.k. hao, hybrid evolutionary algorithms for
graph coloring, journal of combinatorial optimization 3
(1999) 379397.

[2] m. gendreau, a. hertz, g. laporte, a tabu search heuristic
for the vehicle routing problem, management science 40
(1984) 12761290.

[3] f. glover, future paths for integer programming and links
to articial intelligence, computers & operations research
13 (1986) 433549.

[4] a. hertz, finding a feasible course schedule using tabu

search, discrete applied mathematics 35 (1992) 255270.

[5] j.h. holland, adaptation in natural and articial systems,

university of michigan press, ann arbor, mi, 1975.

252

a. hertz, m. widmer / european journal of operational research 151 (2003) 247252

[6] a. hertz, m. widmer, an improved tabu search approach
for solving the job shop scheduling problem with tooling
constraints, discrete applied mathematics 65 (1996) 319
346.

[7] s. kirkpatrick, c.d. gellatt jr., m.p. vecchi, optimization

by simulated annealing, science 220 (1983) 671680.

[8] n. mladenovic, p. hansen, variable neighbourhood
search, computers & operations research 34 (1997) 1097
1100.

[9] y. rochat, e.d. taillard, probabilistic diversication and
intensication in local search for vehicle routing, journal of
heuristics 1 (1995) 147167.

